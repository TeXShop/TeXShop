<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>name</key>
	<string>ROOT</string>
	<key>submenu</key>
	<array>
		<dict>
			<key>name</key>
			<string>AppleScript</string>
			<key>submenu</key>
			<array>
				<dict>
					<key>content</key>
					<string>--AppleScript
-- If the content field starts with "--AppleScript" then it will be interpreted as an AppleScript and will be executed.  
-- example: show TeXShop home page in a web browser

open location "http://darkwing.uoregon.edu/~koch/texshop/texshop.html"</string>
					<key>name</key>
					<string>TeXShop Home page</string>
				</dict>
				<dict>
					<key>content</key>
					<string>--AppleScript
-- #FILEPATH# in the text will be replaced by the path of the document
-- #DVIPATH#, #PSPATH#, #PDFPATH# are also replaced by the paths of .dvi, .ps, .dvi files.  
-- to use the path in Finder, use (alias POSIX file filepath)
-- example: show tex and pdf files in Finder

try
tell application "Finder"
  activate
  reveal {alias POSIX file #FILEPATH#, alias POSIX file #PDFPATH#}
end tell
on error
end try</string>
					<key>name</key>
					<string>Show files</string>
				</dict>
				<dict>
					<key>content</key>
					<string>--AppleScript
-- example: show tex and pdf files in Finder

-- here we assume the path for "Acrobat Reader" is the following
tell application "Finder"
  set volName to name of startup disk
end tell
set appPath to volName &amp; ":Applications:Acrobat Reader 5.0"
-- alternatively, you can hardcode the path

tell application appPath
  activate
  open POSIX file #PDFPATH#
end tell
</string>
					<key>name</key>
					<string>View pdf file with Acrobat</string>
				</dict>
				<dict>
					<key>content</key>
					<string>--AppleScript
--If you return a text string, it will be display in a dialog. 
-- Other types of return values are ignored. 
-- example: dialog and returned text

display dialog "Test dialog: type something below" default answer "Hello World!" buttons {"A", "B", "C"} default button "B"

return "The input was:" &amp; return &amp; (the text returned of the result) &amp; return &amp; "and the button was " &amp; (the button returned of the result)</string>
					<key>name</key>
					<string>Dialog example</string>
				</dict>
			</array>
		</dict>
	</array>
</dict>
</plist>
