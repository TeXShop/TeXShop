{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fswiss\fcharset77 Helvetica-Oblique;
\f3\fnil\fcharset77 LucidaGrande;\f4\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;}
\vieww14160\viewh15380\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li760\qc

\f0\fs36 \cf0 \
\pard\tx560\tx1940\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1040\qc

\f1\b\fs48 \cf0 About Macros
\f0\b0\fs36 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li760\qc
\cf0 \
\pard\tx560\tx1940\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1040\ql\qnatural

\f1\b\fs28 \cf0 Table of Contents\
\pard\tx560\tx1940\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1040\ql\qnatural

\f2\i\b0\fs24 \cf0 \
	Preliminaries\
	Understanding Default Macros\
	Rearranging the Macro Menu\
	Defining New Macros\
	AppleScript Macros\
	Defining AppleScript Macros\
	Creating Dialogs\
\pard\tx560\tx1940\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1040\ql\qnatural

\f1\i0\b \cf0 \
Preliminaries:\
\
\pard\tx560\tx1940\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1040\ql\qnatural

\f0\b0 \cf0 TeXShop macros and the Macro Editor are by 
\f3 Mitsuhiro Shishikura. Default macros were created by Mitsuhiro Shishikura and 
\f0 Hirokazu Ogawa.\
\
Macros come in two kinds. Some insert strings into the TeX source file; these macros are similar to buttons in the Latex panel. Other macros run Applescript scripts.\
\
Macros are stored in ~/Library/TeXShop/Macros/Macros.plist. If this file is missing when TeXShop runs, a default Macro file is created there. The file Macros.plist is an ordinary text file, so it can be opened and inspected with TeXShop. This is usually not necessary because the file is best manipulated with the Macro editor.\
\
When you define useful Macros and wish to give them to others, simply open the Macro Editor and choose "Save selection to file..." in the Macro menu. This will create a file in any location you wish. To distribute your macros, send this file.\
\
To add macros created by others to your list of macros, open the Macro Editor and choose "Add macros from file...". Then use the Macro Editor to arrange the macros as you desire.\
\
\pard\tx560\tx1940\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1040\ql\qnatural

\f1\b \cf0 Understanding Default Macros:\
\
\pard\tx560\tx1940\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1040\ql\qnatural

\f0\b0 \cf0 The best way to understand default macros is to examine their definition with the Macro Editor. For example, consider the macro titled "Begin/End." Suppose you wish to use an environment like the theorem environment. Type the word "theorem" and select it. Then choose the "Begin/End" macro. The word "theorem" will be replaced with the text\
\
	
\f4 \\begin\{theorem\}\
\
	\\end\{theorem\}\
\

\f0 with the cursor placed on the line between this pair.\
\
Now examine the begin/end macro code:\
\
	
\f4 \\begin\{#SEL#\}\
	#INS#\
	\\end\{#SEL#\}\
\

\f0 Text in the macro will be inserted into the source file. Each occurrence of the string #SEL# will be replaced by the text selected when the macro was invoked. If no text was selected, #SEL# will be replaced with an empty string. The cursor will be placed at the end of the inserted text unless the text contains the string #INS#, in which case the cursor will be placed at that location.\
\
Using this knowledge, it is easy to understand and modify the default macros.\
\
\pard\tx560\tx1940\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1040\ql\qnatural

\f1\b \cf0 Rearranging the Macro Menu\
\
\pard\tx560\tx1940\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1040\ql\qnatural

\f0\b0 \cf0 Open the Macro Editor and examine the macro menu on the left. It is shown in an outline view similar to the view of the file system obtained by choosing the middle button of the View tab in the Finder. To rearrange items, drag them from one spot to another. Notice that items can be placed at different levels by sliding left and right. To rename an item, select it in the outline view and type a new name in the field at the top right. \
\
\pard\tx560\tx1940\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1040\ql\qnatural

\f1\b \cf0 Defining New Macros\
\pard\tx560\tx1940\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1040\ql\qnatural

\f0\b0 \cf0 \
New items, new submenus, and new separators can be created by the buttoms at the bottom left. A little practice illustrates the basic behavior of the editor. Submenus can be created to any level.\
\
Any particular item can be assigned a keyboard equivalent using the buttons on the right side of the menu. The result will immediately appear in the outline view. However, these assignments cannot duplicate key combinations already used by TeXShop menus. If they do, the new keyboard shortcut will be ignored.\
\
\pard\tx560\tx1940\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1040\ql\qnatural

\f1\b \cf0 AppleScript Macros\
\pard\tx560\tx1940\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1040\ql\qnatural

\f0\b0 \cf0 \
If a macro begins with the string\
\
	
\f4 --AppleScript\

\f0 \
then the resulting applescript code will run when the Macro is chosen. For example, consider the macro titled "View pdf with Acrobat." Choosing this macro when the source file is active (and the pdf file has been created) will start Adobe Acrobat Reader and open the output pdf file in that program. The corresponding applescript code reads\
\
	
\f4 --AppleScript\
\
	tell application "Acrobat Reader 5.0"\
  	  activate\
  	  open POSIX file #PDFPATH#\
	end tell\
\
\pard\tx560\tx1940\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1040\ql\qnatural

\f1\b \cf0 Defining AppleScript Macros\
\pard\tx560\tx1940\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1040\ql\qnatural

\f0\b0 \cf0 \
AppleScript syntax is a subject all its own; to learn more about it, read one of several books on the subject. When TeXShop interpretes an applescript macro, it first replaces any string #FILEPATH#, #PDFPATH#, #DVIPATH#, #PSPATH# with the complete path name of the source tex file, pdf file, dvi file, or ps file respectively.  \
\
Applescript can run shell commands. Hence Applescript macros can perform complicated scripts to process TeX projects. This ability is currently limited because TeXShop itself understands few AppleScript directives. We hope this will improve in the future.
\f4 \

\f0 \
\pard\tx560\tx1940\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1040\ql\qnatural

\f1\b \cf0 Creating Dialogs\
\pard\tx560\tx1940\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1040\ql\qnatural

\f0\b0 \cf0 \
AppleScript can create dialogs and act on user input. For example, insert the following script and test its behavior.\
\
	
\f4 --AppleScript\
	--If you return a text string, it will be display in a dialog. \
	-- Other types of return values are ignored. \
	-- example: dialog and returned text\
\
	display dialog "Test dialog: type something below" default answer "Hello World!" buttons \{"A", "B", "C"\} default button "B"\
\
	return "The input was:" & return & (the text returned of the result) & return & "and the button was " & (the button returned of the result)\
}