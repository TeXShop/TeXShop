<HTML><HEAD>			<META HTTP-EQUIV="content-type" CONTENT="text/html;charset=Shift_JIS">			<TITLE>AppleScript マクロを定義する</TITLE>			<META NAME="copyright" CONTENT="Copyright (c) 2003 Richard Koch under the GNU FDL">			<META NAME="description" CONTENT="AppleScriptコマンドを書く方法について"></HEAD><BODY BGCOLOR="#ffffff" topmargin="20" leftmargin="20"><TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" WIDTH="100%">	<TR HEIGHT="40">		<TD WIDTH="40" HEIGHT="40"><a href="../TeXShop%20Help.html"><IMG HEIGHT="40" WIDTH="40" border="0" SRC="../gfx/xicnsc.gif"></a></TD>		<TD WIDTH="6" HEIGHT="40"></TD>		<TD HEIGHT="40" VALIGN="middle"><FONT FACE="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3" SIZE="4"><B>AppleScript マクロを定義する</B></FONT></TD>	</TR></TABLE><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">AppleScript の文法はそれ自体でひとつのテーマです。AppleScript についてさらに学ぶには、関連本をどれか１冊読んでみてください。Mac OS X に付属するデベロッパー・ツールズをインストールしているのであれば、AppleScript についてのオンライン本が Developer フォルダの中に入っています。</font></p><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">TeXShop が AppleScript マクロを実行するときには、最初に #FILEPATH#, #PDFPATH#, #DVIPATH#, #PSPATH#, #LOGPATH#, #AUXPATH# といった文字列をすべて、TeX ソースファイル、pdf ファイル、dvi ファイル、ps ファイル、log ファイル、あるいは aux ファイルそれぞれの完全パス名で置き換えます。同様に文字列 #INDPATH#, #BBLPATH#, #HTMLPATH# は、ind ファイル、bbl ファイル、html ファイルの完全パス名に置き換えられます。</font></p><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">加えて、文字列 #NAMEPATH# はすべて、TeX ソースファイルの拡張子を省いた完全パス名で置き換えられますし、文字列 #DOCUMENTNAME# はすべて、現在の文書の表示名で置き換えられます。この最後の置き換えは、いくぶん微妙なものです；ソースウィンドウの上部に示されている文書のタイトルが使われるのです。もし「拡張子を隠す」にチェックを入れて文書を保存していた場合には、#DOCUMENTNAME# は文書名のみになります。けれども「拡張子を隠す」にチェックを入れずに文書を保存していれば、#DOCUMENTNAME# には文書名＋拡張子が入ります。このことは、次のように AppleScript コードで呼び出す文書を見つけるのに使えます：</font></p><font size="3" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3"><tt>	<dl>		<dd>tell document #DOCUMENTNAME# of application "TeXShop"		<dd>latex		<dd>end tell	</dl></tt></font><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">AppleScript コマンドを書く方法は、少なくとも２つあります。AppleScript はシェルコマンドを実行できるので、AppleScript で前処理をした後、シェルコマンドを呼び出して実作業をさせることができます。TeXShop にはこの手法についての例がいくつか付属しています；こうした例の中には、ヘルプの後節で説明するものもあります。AppleScript コマンドは、TeXShop に組み込まれているコマンドを呼び出して直接作動させることもできます。後節ではこちらの手法の例について触れます。</font></p><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">TeXShop は以下のコマンドを理解します：</font></p><font size="3" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3"><tt>	<ol>		<li>typeset		<li>latex		<li>tex		<li>context		<li>bibtex		<li>makeindex		<li>metapost		<li>typesetinteractive		<li>latexinteractive		<li>texinteractive		<li>contextinteractive		<li>bibtexinteractive		<li>makeindexinteractive		<li>metapostinteractive		<li>taskdone		<li>refreshpdf		<li>refreshtext		<li>goto line	</ol></tt></font><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">最初の７つのコマンドは TeXShop のタイプセット・ルーチンを呼び出します。これらのコマンドはエラー箇所で止まることなしにタイプセットを継続します。次の７つのコマンドもまた TeXShop のタイプセット・コマンドですが、こちらはもしエラーがあれば、コンソールで対話的に作業を行なえます。タイプセット・コマンドが呼び出されると、作業が完了するのを待たずに、コントロールはすぐに AppleScript に戻ります。「 taskdone 」は、タイプセット中は NO を返し、完了すると YES を返します。「 refreshpdf 」と「 refreshtext 」は、pdf およびテキスト文書を最新の状態で画面に表示します。「 goto line 」コマンドは、指定の行を選択するようエディタに命じます；たとえば：</font></p><font size="3" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3"><tt>	<dl>		<dd>tell document #DOCUMENTNAME# of application "TeXShop"		<dd>goto line 37		<dd>end tell	</dl></tt></font></BODY></HTML>