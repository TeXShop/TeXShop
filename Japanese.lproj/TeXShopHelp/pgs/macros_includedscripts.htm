<HTML><HEAD>			<META HTTP-EQUIV="content-type" CONTENT="text/html;charset=Shift_JIS">			<TITLE>デフォルトの AppleScript マクロ</TITLE>			<META NAME="copyright" CONTENT="Copyright (c) 2003 Richard Koch under the GNU FDL">			<META NAME="description" CONTENT="1.33から付属するマクロについての説明"></HEAD><BODY BGCOLOR="#ffffff" topmargin="20" leftmargin="20"><TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" WIDTH="100%">	<TR HEIGHT="40">		<TD WIDTH="40" HEIGHT="40"><a href="../TeXShop%20Help.html"><IMG HEIGHT="40" WIDTH="40" border="0" SRC="../gfx/xicnsc.gif"></a></TD>		<TD WIDTH="6" HEIGHT="40"></TD>		<TD HEIGHT="40" VALIGN="middle"><FONT FACE="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3" SIZE="4"><B>デフォルトの AppleScript マクロ</B></FONT></TD>	</TR></TABLE><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">TeXShop 1.33 には Claus Gerhardt やその他の人たちによる AppleScript の広汎なコレクションが付属しています。これらのスクリプトの多くは、一連のタイプセット・コマンドが順を追って実行されるとき、ワークフローを自動化します。スクリプトを複製したり修正したりすることでユーザは、それぞれのワークフローに適したスクリプトを組み立てることができます。</font></p><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">このセクションでは、こうしたスクリプトのいくつかについて述べます。</font></p><hr><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3"><b>Convert to Mac</b> と <b>Convert to Unix</b> と <b>Convert to Windows</b></font></p><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">初期の頃は、テレタイプ端末が通信に使われていました。ascii 文字セットはいまだにその頃の名残りをとどめています；たとえば 0x07 はテレタイプのベルを鳴らします。0x0a というキャラクタはキャリッジを次行へ送るラインフィード（ LF ＝改行）でしたし、0x0d というキャラクタはキャリッジを行の先頭まで引き戻すキャリッジ・リターン（ CR ＝行頭復帰）でした。行を改めるには、ひとつづきの 0x0d 0x0a を使いました。</font></p><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">テレタイプの時代が終わると、コンピュータの製造者たちは、改行を示すのに、これらのキャラクタの異なる一部を選び取りました。UNIX では 0x0a（ LF ）が使われ、Windows では 0x0d 0x0a（ CR + LF ）が、そして昔の Macintosh Classic では 0x0d（ CR ）が使われました。Mac OS X 用の Apple のガイドラインには、こうした仕様のいずれが用いられているファイルでも自動的に開けるようにすべきだ、と述べられています。TextEdit や TeXShop などを含むほとんどのプログラムは、このガイドラインにしたがっています。TeXShop では、新規書類は Unix の改行コードで作成されますが、Mac OS Classic で作成したファイルを取り込んで新しい行を付け加えた場合、文書の古い部分は Classic の改行コードで保存され、新たな箇所は Unix の改行コードで保存されます。</font></p><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">こうした改行コードは、異なるオペレーティング・システムを使っている人にファイルを送らないかぎりは、トラブルの種になったりはしません。多くのエディタが今では複数の改行コード仕様を理解しますから、そう頻繁に問題にはならないでしょう。けれども困ったことになった場合には、上記のスクリプトを使ってください。かりにソースファイルの名前を MyFile.tex としておきましょう。「 Convert to Mac 」は、MyFile_Mac.tex という名前の、ソースコードは同じで Macintosh の改行コードになっている新しいファイルを生成します。「 Convert to Unix 」と「 Convert to Windows 」も同様に機能します。これらのスクリプトはすべて ~/Library/TeXShop/bin にある「 flip 」という、Craig Stuart Sapp の作ったバイナリ・プログラムを呼び出します。詳細については <A HREF="http://ccrma-www.stanford.edu/~craig/utility/flip/">http://ccrma-www.stanford.edu/~craig/utility/flip/</A> を参照してください。</font></p><hr><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3"><B>Other Scripts->Bibliography</B></font></p><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">参考文献目録のあるファイルを処理するには、数度のタイプセット操作が必要になります。最初に LaTeX を実行して .aux ファイルを作る。それから Bibtex を実行し、.aux ファイルを使って .bbl ファイルと .blg ファイルを作る。LaTeX をふたたび実行して文書に参考文献目録を付け加える。最後に LaTeX を実行して本文中の目録の参照を更新する。</font></p><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">「 Bibliography 」コマンドは、以上のことをひとつずつ行ないます。まず最初にファイルを保存します。そして latex -> bibtex -> latex -> latex の順に実行します。最後にプレビュー画面を更新します。</font></p><hr><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3"><b>htlatexc</b> と <b>htlatexr</b></font></p><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">Tex4ht は、LaTeX 文書をウェブページに変換する TeX プログラムです。ソースは標準的な LaTeX ファイルでよく、eps 形式のイラストを含んでいてもかまいません。最終的な結果は html ページとなり、多数の gif ファイルが含まれています。スクリプトコマンド「 htlatexc 」は、ソース文書を保存し、htlatex を実行し、結果の html ファイルを Safari で開きます。つまりこれは、TeXShop の新しいタイプセット・コマンドのように動作します── TeXShop の新しいコードを待たずにユーザによって構築される、ということを除けば！</font></p><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">これらのスクリプトを使う際には、Tex4ht パッケージを使用する必要はありません──このパッケージは自動的に読み込まれます。スクリプト htlatexc は、追加オプションなしで htlatex を呼び出します。スクリプト htlatexr は、をオプション「 -r 」を付けて呼び出します──これはすでにあるすべての .gif ファイルを再生成するようプログラムに命じます。</font></p><hr><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3"><B>pdfselectc</B></font></p><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">このスクリプトは、シェルスクリプト pdfselect を実行し、文書の中から選択したページのみを含む pdf ファイルを作成します。これを実行すると、作成する pdf ファイルの数を尋ねるダイアログが表示されます。ためしに 3 としてみましょう。つづいて最初の文書のページ範囲を尋ねるダイアログが表示されます。これを 5:8 とします。次に第２の文書のページ範囲を尋ねるダイアログが表示されます。これを 10 とします。最後に第３の文書のページ範囲を尋ねるダイアログが表示されます。これを 20:30 とします。これで３つの文書が得られることになります──ひとつには元の文書の５〜８ページが、もうひとつには10ページ目が、そして最後のひとつには20〜30ページが含まれています。</font></p><hr><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3"><b>mpostc</b> と <b>mpostcpl</b> と <b>latex-makeindex-mpost</b></font></p><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">スクリプト mpostc は mpost を実行した後で pdflatex を実行します；スクリプト mpostcpl は pdflatex を実行した後で mpost を実行し、ふたたび pdflatex を実行します。この３つのコマンドを順々に用いる例については、TeXShop ヘルプの「全般的なヘルプ」にある「 <A HREF = "general_context.htm">ConTeXt と MetaPost</A> 」を参照してください。</font></p><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">スクリプト latex-makeindex-mpost は、ソースを保存し、pdflatex, makeindex, mpost, そしてもう一度 pdflatex を実行し、その過程で当該のログファイルを開きます。</font></p><hr><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3"><B>その他</B></font></p><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">TeXShop ディストリビューション内の TeXShop_Folder には、Scripts という名前のサブフォルダがあります──これは Claus Gerhardt によるものですが、追加のスクリプトや多くのドキュメント類が入っています。より詳しいことについてはこれを調べてみてください。</font></p></BODY></HTML>