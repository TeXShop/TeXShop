<HTML><HEAD>			<META HTTP-EQUIV="content-type" CONTENT="text/html;charset=Shift_JIS">			<TITLE>シェルコマンドでスクリプトを書く</TITLE>			<META NAME="copyright" CONTENT="Copyright (c) 2003 Richard Koch under the GNU FDL">			<META NAME="description" CONTENT="シェルコマンドを使った AppleScript の作例と作法"></HEAD><BODY BGCOLOR="#ffffff" topmargin="20" leftmargin="20"><TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" WIDTH="100%">	<TR HEIGHT="40">		<TD WIDTH="40" HEIGHT="40"><a href="../TeXShop%20Help.html"><IMG HEIGHT="40" WIDTH="40" border="0" SRC="../gfx/xicnsc.gif"></a></TD>		<TD WIDTH="6" HEIGHT="40"></TD>		<TD HEIGHT="40" VALIGN="middle"><FONT FACE="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3" SIZE="4"><B>シェルコマンドでスクリプトを書く</B></FONT></TD>	</TR></TABLE><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">Claus Gerhardt による AppleScript 「 pdflatexc 」を使って、AppleScript から UNIX のシェルコマンドを呼び出す原理を例示してみましょう。このシェルスクリプト自体は大しておもしろくありません；teTeX のバイナリの場所を $PATH 変数に加え、pdflatex を呼び出してタイプセットを行なっています。</font></p><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">シェルスクリプトそのものは、TeXShop には依存していませんし、pdflatexc を含むディレクトリがバイナリの検索パスにあれば「 pdflatexc myfile.tex 」と打ち込むことで Terminal からも実行できます。これがそのシェルスクリプトです：</font></p><font size="3" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3"><tt>	<dl>		<dd>#!/bin/tcsh		<dd># pdflatexc		<dd># Claus Gerhardt		<dd>#		<dd># Usage		<dd># pdflatexc filename.tex		<p>		<dd>set path= ($path /usr/local/teTeX/bin/powerpc-apple-darwin-current /usr/local/bin)		<p>		<dd>pdflatex --shell-escape "$1"	</dl></tt></font><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">もちろん、いくつもの作業を次々とこなしてゆくような、より複雑なスクリプトを書くこともあるでしょう。そういうときにこそ、こうした技法が役に立つようになります。</font></p><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">このシェルスクリプトを呼び出すのに使う AppleScript はもうちょっとおもしろいものです。まずはご覧ください：</font></p><font size="3" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3"><tt>	<dl>		<dd>--Applescript		<dd>-- Apply only to an already saved file.		<dd>-- すでに保存済みのファイルにのみ適用すること。		<dd>-- Claus Gerhardt, Nov. 2003		<p>		<dd>set scriptPath to (do shell script "dirname " & "~/Library/TeXShop/Scripts/ex")		<dd>set scriptPath to scriptPath & "/setname.scpt"		<dd>set scriptName to POSIX file scriptPath as alias		<dd>set scriptLiB to (load script scriptName)		<dd>tell scriptLib		<dd>set frontName to setname(#NAMEPATH#,#TEXPATH#)		<dd>end tell		<p>		<dd>set fileName to  #TEXPATH#		<dd>set n to (number of characters of contents of fileName)		<dd>set fileNamequoted to quoted form of fileName		<dd>set baseName to do shell script "basename " & fileNamequoted		<dd>set m to (number of characters of contents of baseName)		<dd>set dirName to quoted form of (characters 1 thru (n - m - 1) of fileName as string)		<p>		<dd>set shellScript to "cd " & dirName & ";"		<dd>set shellScript to shellScript & "~/Library/TeXShop/bin/pdflatexc  " & baseName		<dd>do shell script shellScript		<p>		<dd>tell document frontName		<dd>	refreshpdf		<dd>end tell	</dl></tt></font><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">前置きのコメントはさておき、このスクリプトの冒頭７行は、Claus Gerhardt の魔法のレシピです──ソースファイルを保存し、処理しようとしている文書の名前を見つけて「 frontName 」にセットしています。このレシピでは、~/Library/TeXShop/Scripts にある「 setpath.scpt 」というコンパイル済みのスクリプトを使ってハードな作業すべてをこなしています。注意深く読み解いてみれば、この数行は ~/Library/TeXShop/Scripts/setname.scpt というパスを見つけ、パラメータ #NAMEPATH# と #TEXPATH# でスクリプトを呼び出していることがわかります。</font></p><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">多くの AppleScript では、これはすべて、次のようなコマンドを使う簡単な方法で済ませられます：</font></p><font size="3" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3"><tt>	<dl>		<dd> set frontName to #DOCUMENTNAME#		<dd> tell document frontName of application "TeXShop"		<dd> save		<dd> end tell	</dl></tt></font><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">しかしながら Gerhardt のスクリプトには長所が２つあります。ひとつは、前面にある文書がログファイル（たとえば /Users/koch/Examples/myfile.log のようなもの）であっても──換言すれば、これ以降のコマンドを受け入れないような種類の文書だったとしても──スクリプトを呼び出せる、ということです。もうひとつは、ファイルが一度も保存されていなかった場合、Gerhardt のスクリプトは保存を行なおうとしてエラーを返します──その一方で「保存」コマンドにより、保存ダイアログを出して TeXShop は保留状態になります（詳しくはヘルプの「 <A HREF = "macros_writingcompletescripts.htm">TeXShop のタイプセット・コマンドでスクリプトを書く</A>」を参照してください）。</font></p><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">つづく６行では、変数 dirName と baseName を定義しています。ソースファイルが「 /Users/koch/This directory/Stuff/myfile.tex 」の場合、dirName は、シングルクオートとダブルクオートを含めて「 " '/Users/koch/This directory/Stuff' " 」となり、baseName は「 myfile.tex 」となります。この作業部分が必要なのは、フォルダ名にスペースがあってもいいようにです。依然として TeX は、最終的なファイル名にあるスペースを容認しません。</font></p><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">そのまた次の３行がシェルスクリプトを呼び出しています。結果的には Terminal で「 cd dirName; ~/Library/TeXShop/bin/pdflatexc baseName 」と打ち込むのと同じとはいえ、はるかに正確です──というのも、dirName は引用ではない形（つまり、上の例で言えば、途中のディレクトリにスペースがあるのでシングルクオートを含めて「 '/Users/koch/This directory/Stuff' 」）に置き換えねばならないのです。</font></p><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">AppleScript におけるシェルスクリプトは次のような形で発令されます──</font></p><font size="3" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3"><tt>	<dl>		<dd>do shell script "cmd input"	</dl></tt></font><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">複数のシェルスクリプトを結合させたいのであれば、対等につなぐ形式で書くのがいいでしょう──</font></p><font size="3" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3"><tt>	<dl>		<dd>do shell script "cmd " & "input"	</dl></tt></font><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">cmd と引用符の間の半角スペースに注意してください。アンパサンド（＆記号）はバイナリの連結演算子です。つまりこういうことです──</font></p><font size="3" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3"><tt>	<dl>		<dd>"cmd " & "input" = "cmd input"	</dl></tt></font><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">シェルが AppleScript で呼び出される場合、デフォルトの作業ディレクトリはルートディレクトリです。</font></p><font size="3" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3"><tt>	<dl>		<dd>do shell script "cd " dirName	</dl></tt></font><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">上のコマンドでは、ディレクトリを dirName で定められているディレクトリに変更しています；dirName はすでに引用済みなので引用符を加える必要はありません。</font></p><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">作業ディレクトリを動かさずにさらにコマンドを入れたいのであれば、「 do shell script 」の形では記述できません──それだと新規シェルが呼び出されてしまいます。Terminal では連続するコマンドをセミコロンで区切りますが、AppleScript では「 ";" 」を使います。つまりこういうふうに──</font></p><font size="3" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3"><tt>	<dl>		<dd>do shell script "cmd(1) " & "input(1)" & ";" & "cmd(2) " & "input(2)"	</dl></tt></font><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">上記の例で言うならこれは、こういうことです： cmd(1) = cd、"input(1)" = dirName、cmd(2) = ~/Library/TeX/bin/pdflatexc（シェルスクリプトを呼び出しています）、"input(2)" = baseName。</font></p><font size="3" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3"><tt>	<dl>		<dd>set shellScript to "cd " & dirName & ";"		<dd>set shellScript to shellScript & "~/Library/TeX/bin/pdflatexc  " & baseName	</dl></tt></font><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">──という２行は単に、ひとつながりのコマンドを変数ごとに分かち書きしているだけのことです。</font></p><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">最後の３行でプレビューウィンドウを更新しています。</font></p><p><font size="2" face="Lucida Grande,Geneva,Arial,ヒラギノ角ゴ Pro W3">たしかに複雑な行もいくつかありますが、そうしたものでも、そのままコピーして新しいスクリプトに使えます。</font></p></BODY></HTML>