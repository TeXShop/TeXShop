<HTML>

<HEAD>
			<META HTTP-EQUIV="content-type" CONTENT="text/html;charset=Shift_JIS">
			<TITLE>AppleScript マクロを定義する</TITLE>
			<META NAME="copyright" CONTENT="Copyright (c) 2003 Richard Koch under the GNU FDL">
			<META NAME="description" CONTENT="AppleScriptコマンドを書く方法について">
			<link href="../sty/screen.css" rel="stylesheet" media="all">
</HEAD>

<BODY>
<div id="content_border">

<p>
AppleScript の文法はそれ自体でひとつのテーマです。AppleScript についてさらに学ぶには、関連本をどれか１冊読んでみてください。Mac OS X に付属するデベロッパー・ツールズをインストールしているのであれば、AppleScript についてのオンライン本が Developer フォルダの中に入っています。
</p>

<p>
TeXShop が AppleScript マクロを実行するときには、最初に #FILEPATH# ・ #PDFPATH# ・ #DVIPATH# ・ #PSPATH# ・ #LOGPATH# ・ #AUXPATH# といった文字列をすべて、TeX ソースファイル、pdf ファイル、dvi ファイル、ps ファイル、log ファイル、あるいは aux ファイルそれぞれの完全パス名で置き換えます。同様に文字列 #INDPATH# ・ #BBLPATH# ・ #HTMLPATH# は、ind ファイル、bbl ファイル、html ファイルの完全パス名に置き換えられます。
</p>

<p>
加えて、文字列 #NAMEPATH# はすべて、TeX ソースファイルの拡張子を省いた完全パス名で置き換えられますし、文字列 #DOCUMENTNAME# はすべて、現在の文書の表示名で置き換えられます。この最後の置き換えは、いくぶん微妙なものです ； ソースウインドウの上部に示されている文書のタイトルが使われるのです。もし「拡張子を隠す」にチェックを入れて文書を保存していた場合には、#DOCUMENTNAME# は文書名のみになります。けれども「拡張子を隠す」にチェックを入れずに文書を保存していれば、#DOCUMENTNAME# には文書名＋拡張子が入ります。このことは、次のように AppleScript コードで呼び出す文書を見つけるのに使えます：
</p>

<tt>
	<dl>
		<dd>tell document #DOCUMENTNAME# of application "TeXShop"
		<dd>latex
		<dd>end tell
	</dl>
</tt>

<p>
AppleScript コマンドを書く方法は、少なくとも２つあります。AppleScript はシェルコマンドを実行できるので、AppleScript で前処理をした後、シェルコマンドを呼び出して実作業をさせることができます。TeXShop にはこの手法についての例がいくつか付属しています ； こうした例の中には、ヘルプの後節で説明するものもあります。AppleScript コマンドは、TeXShop に組み込まれているコマンドを呼び出して直接作動させることもできます。後節ではこちらの手法の例について触れます。
</p>

<p>
TeXShop は以下のコマンドを理解します：
</p>

<tt>
	<ol>
		<li>typeset
		<li>latex
		<li>tex
		<li>context
		<li>bibtex
		<li>makeindex
		<li>metapost
		<li>typesetinteractive
		<li>latexinteractive
		<li>texinteractive
		<li>contextinteractive
		<li>bibtexinteractive
		<li>makeindexinteractive
		<li>metapostinteractive
		<li>taskdone
		<li>refreshpdf
		<li>refreshtext
		<li>goto line
	</ol>
</tt>

<p>
最初の７つのコマンドは TeXShop のタイプセット・ルーチンを呼び出します。これらのコマンドはエラー箇所で止まることなしにタイプセットを継続します。次の７つのコマンドもまた TeXShop のタイプセットコマンドですが、こちらはもしエラーがあれば、コンソールで対話的に作業を行なえます。タイプセットコマンドが呼び出されると、作業が完了するのを待たずに、コントロールはすぐに AppleScript に戻ります。「taskdone」は、タイプセット中は NO を返し、完了すると YES を返します。「refreshpdf」と「refreshtext」は、pdf およびテキスト文書を最新の状態で画面に表示します。「goto line」コマンドは、指定の行を選択するようエディタに命じます ； たとえば：
</p>

<tt>
	<dl>
		<dd>tell document #DOCUMENTNAME# of application "TeXShop"
		<dd>goto line 37
		<dd>end tell
	</dl>
</tt>

</div>
<div id="header_background"></div>
<div id="header_logo"><a href="../TeXShop%20Help.html"><IMG HEIGHT="40" WIDTH="40" border="0" SRC="../gfx/xicnsc.gif"></a></div>
<div id="header_chapter">マクロ・ヘルプ</div>
<div id="header_title">AppleScript マクロを定義する</div>

<div id="menu_border">

	<UL>
		<li><a href="macros_preliminaries.htm">まえがき</a> 
		<li><a href="macros_default.htm">デフォルトのマクロを理解する</a>
		<li><a href="macros_rearrange.htm">マクロの項目名を並べ替える</a>
		<li><a href="macros_define.htm">新しいマクロを定義する</a>
		<li><a href="macros_applescript.htm">AppleScript マクロ</a>

		<li><a href="macros_includedscripts.htm">デフォルトの AppleScript マクロ</a>
		<li><a href="macros_defapplescript.htm">AppleScript マクロを定義する</a>
		<li><a href="macros_dialogs.htm">ダイアログを作る</a>
		<li><a href="macros_writingcompletescripts.htm">TeXShop のタイプセットコマンドでスクリプトを書く</a>
		<li><a href="macros_writingcommandscripts.htm">シェルコマンドでスクリプトを書く</a>
	</UL>
</div>
</BODY>

</HTML>
