<HTML>

<HEAD>
			<META HTTP-EQUIV="content-type" CONTENT="text/html;charset=Shift_JIS">
			<TITLE>デフォルトの AppleScript マクロ</TITLE>
			<META NAME="copyright" CONTENT="Copyright (c) 2003 Richard Koch under the GNU FDL">
			<META NAME="description" CONTENT="1.33から付属するマクロについての説明">
			<link href="../sty/screen.css" rel="stylesheet" media="all">
</HEAD>


<BODY>
<div id="content_border">

<!-- 
<p>
TeXShop には Will Robertson や Claus Gerhardt その他の人たちによる AppleScript の広汎なコレクションが付属しています。これらのスクリプトのいくつかは、一連のタイプセット・コマンドが順を追って実行されるとき、ワークフローを自動化します。スクリプトを複製したり修正したりすることでユーザは、それぞれのワークフローに適したスクリプトを組み立てることができます。
</p>
 -->

<p>
TeXShop には Will Robertson さんや Claus Gerhardt さん、その他の人たちによる AppleScript の広汎なコレクションが付属しています。これらのスクリプトのいくつかは、一連のタイプセットコマンドが順を追って実行されるとき、ワークフローを自動化します。スクリプトを複製したり修正したりすることでユーザは、それぞれのワークフローに適したスクリプトを組み立てることができます。
</p>

<p>
このセクションでは、こうしたスクリプトのいくつかについて述べます。
</p>

<hr>
<p>
<b>Column Macros</b>・<b>Insert Reference</b> ・ <b>Open Quickly</b>
</p>

<!-- 
<p>
これらのマクロは Will Robertson によるものです。最初のものは、任意の行列やテーブルをこしらえるのにとても便利です。次のものは、現在のファイル全体から \label{...} コマンドを探し出してリスト表示するので、その中から参照ラベルを挿入したり、それを（任意の）カスタマイズ可能な LaTeX コマンドで囲んだりできます。最後のマクロは、作業中のソースファイルがあるディレクトリ内のファイルが手早く開けます。
</p>
 -->

<p>
これらのマクロは Will Robertson さんによるものです。最初のものは、任意の行列やテーブルをこしらえるのにとても便利です。次のものは、現在のファイル全体から \label{...} コマンドを探し出してリスト表示するので、その中から参照ラベルを挿入したり、それを（任意の）カスタマイズ可能な LaTeX コマンドで囲んだりできます。最後のマクロは、作業中のソースファイルがあるディレクトリ内のファイルが手早く開けます。
</p>

<hr>
<p>
<b>Convert to Mac</b> ・ <b>Convert to Unix</b> ・ <b>Convert to Windows</b>
</p>

<p>
初期の頃は、テレタイプ端末が通信に使われていました。ascii 文字セットはいまだにその頃の名残りをとどめています ； たとえば 0x07 はテレタイプのベルを鳴らします。0x0a というキャラクタはキャリッジを次行へ送るラインフィード（ LF ＝改行）でしたし、0x0d というキャラクタはキャリッジを行の先頭まで引き戻すキャリッジ・リターン（ CR ＝行頭復帰）でした。行を改めるには、ひとつづきの 0x0d 0x0a を使いました。
</p>

<p>
テレタイプの時代が終わると、コンピュータの製造者たちは、改行を示すのに、これらのキャラクタの異なる一部を選び取りました。UNIX では 0x0a（ LF ）が使われ、Windows では 0x0d 0x0a（ CR＋LF ）が、そして昔の Macintosh Classic では 0x0d（ CR ）が使われました。Mac OS X 用の Apple のガイドラインには、こうした仕様のいずれが用いられているファイルでも自動的に開けるようにすべきだ、と述べられています。TextEdit や TeXShop などを含むほとんどのプログラムは、このガイドラインにしたがっています。TeXShop では、新規書類は Unix の改行コードで作成されますが、Mac OS Classic で作成したファイルを取り込んで新しい行を付け加えた場合、文書の古い部分は Classic の改行コードで保存され、新たな箇所は Unix の改行コードで保存されます。
</p>

<p>
こうした改行コードは、異なるオペレーティング・システムを使っている人にファイルを送らないかぎりは、トラブルの種になったりはしません。多くのエディタが今では複数の改行コード仕様を理解しますから、そう頻繁に問題にはならないでしょう。けれども困ったことになった場合には、上記のスクリプトを使ってください。かりにソースファイルの名前を MyFile.tex としておきましょう。「Convert to Mac」は、MyFile_Mac.tex という名前の、ソースコードは同じで Macintosh の改行コードになっている新しいファイルを生成します。「Convert to Unix」と「Convert to Windows」も同様に機能します。これらのスクリプトはすべて ~/Library/TeXShop/bin にある「flip」という、Craig Stuart Sapp の作ったバイナリ・プログラムを呼び出します。詳細については <A HREF="http://ccrma-www.stanford.edu/~craig/utility/flip/">http://ccrma-www.stanford.edu/~craig/utility/flip/</A> を参照してください。
</p>

<hr>
<p>
<B>Other Scripts->Bibliography</B>
</p>

<p>
参考文献目録のあるファイルを処理するには、数度のタイプセット操作が必要になります。最初に LaTeX を実行して .aux ファイルを作る。それから Bibtex を実行し、.aux ファイルを使って .bbl ファイルと .blg ファイルを作る。LaTeX をふたたび実行して文書に参考文献目録を付け加える。最後に LaTeX を実行して本文中の目録の参照を更新する。
</p>

<p>
「Bibliography」コマンドは、以上のことをひとつずつ行ないます。まず最初にファイルを保存します。そして latex -> bibtex -> latex -> latex の順に実行します。最後にプレビュー画面を更新します。
</p>

<hr>
<p>
<b>htlatexc</b> ・ <b>htlatexr</b>
</p>

<p>
Tex4ht は、LaTeX 文書をウェブページに変換する TeX プログラムです。ソースは標準的な LaTeX ファイルでよく、eps 形式のイラストを含んでいてもかまいません。最終的な結果は html ページとなり、多数の gif ファイルが含まれています。スクリプトコマンド「htlatexc」は、ソース文書を保存し、htlatex を実行し、結果の html ファイルを Safari で開きます。つまりこれは、TeXShop の新しいタイプセットコマンドのように動作します──TeXShop の新しいコードを待たずにユーザによって構築される、ということを除けば！
</p>

<p>
これらのスクリプトを使う際には、Tex4ht パッケージを使用する必要はありません──このパッケージは自動的に読み込まれます。スクリプト htlatexc は、追加オプションなしで htlatex を呼び出します。スクリプト htlatexr は、をオプション「-r」を付けて呼び出します──これはすでにあるすべての .gif ファイルを再生成するようプログラムに命じます。
</p>

<hr>
<p>
<B>pdfselectc</B>
</p>

<p>
このスクリプトは、シェルスクリプト pdfselect を実行し、文書の中から選択したページのみを含む pdf ファイルを作成します。これを実行すると、作成する pdf ファイルの数を尋ねるダイアログが表示されます。ためしに 3 としてみましょう。つづいて最初の文書のページ範囲を尋ねるダイアログが表示されます。これを 5:8 とします。次に第２の文書のページ範囲を尋ねるダイアログが表示されます。これを 10 とします。最後に第３の文書のページ範囲を尋ねるダイアログが表示されます。これを 20:30 とします。これで３つの文書が得られることになります──ひとつには元の文書の５〜８ページが、もうひとつには10ページ目が、そして最後のひとつには20〜30ページが含まれています。
</p>

<hr>
<p>
<b>mpostc</b> ・ <b>mpostcpl</b> ・ <b>latex-makeindex-mpost</b>
</p>

<p>
スクリプト mpostc は mpost を実行した後で pdflatex を実行します ； スクリプト mpostcpl は pdflatex を実行した後で mpost を実行し、ふたたび pdflatex を実行します。この３つのコマンドを順々に用いる例については、TeXShop ヘルプの「上級向けのヘルプ」にある「<A HREF = "advanced_context.htm">ConTeXt と MetaPost</A>」を参照してください。
</p>

<p>
スクリプト latex-makeindex-mpost は、ソースを保存し、pdflatex ・ makeindex ・ mpost そしてもう一度 pdflatex を実行し、その過程で当該のログファイルを開きます。
</p>

</div>
<div id="header_background"></div>
<div id="header_logo"><a href="../TeXShop%20Help.html"><IMG HEIGHT="40" WIDTH="40" border="0" SRC="../gfx/xicnsc.gif"></a></div>
<div id="header_chapter">マクロ・ヘルプ</div>
<div id="header_title">デフォルトの AppleScript マクロ</div>

<div id="menu_border">

	<UL>
		<li><a href="macros_preliminaries.htm">まえがき</a> 
		<li><a href="macros_default.htm">デフォルトのマクロを理解する</a>
		<li><a href="macros_rearrange.htm">マクロの項目名を並べ替える</a>
		<li><a href="macros_define.htm">新しいマクロを定義する</a>
		<li><a href="macros_applescript.htm">AppleScript マクロ</a>

		<li><a href="macros_includedscripts.htm">デフォルトの AppleScript マクロ</a>
		<li><a href="macros_defapplescript.htm">AppleScript マクロを定義する</a>
		<li><a href="macros_dialogs.htm">ダイアログを作る</a>
		<li><a href="macros_writingcompletescripts.htm">TeXShop のタイプセットコマンドでスクリプトを書く</a>
		<li><a href="macros_writingcommandscripts.htm">シェルコマンドでスクリプトを書く</a>
	</UL>
</div>
</BODY>

</HTML>
