<HTML>

<HEAD>
				<META HTTP-EQUIV="content-type" CONTENT="text/html;charset=Shift_JIS">
				<TITLE>更新履歴</TITLE>
				<META NAME="copyright" CONTENT="Copyright (c) 2003 Richard Koch under the GNU FDL">
				<META NAME="description" CONTENT="新機能　バグ修正　（バージョン1.31〜1.37＆2.00）">
				<link href="../sty/screen.css" rel="stylesheet" media="all">
</HEAD>

<BODY>
<div id="content_normal">

<p><h5>バージョン 1.37 と 2.00 では TeXShop にさらなる機能を追加し、いくつかのバグを修正しました。</h5></p>

<p><h6>2.00 での新機能：</h6></p>

<ul>
<li>
<!--
A new synchronization method has been added to TeXShop,
using the ability in Tiger to search for strings in pdf files.
The new method does not require including a  pdfsync.sty file,
so it works out of the box with files typeset using any engine:
pdftex or pdflatex, TeX + ghoscript or LaTeX + ghostscript, XeTeX,
and other engines.
-->
シンクロナイゼーションの新しい手法を TeXShop に追加しました──
これは PDF ファイル内の文字列を検索する Tiger の機能を利用しています。
この新しい手法では pdfsync.sty を必要としないので、
どのエンジンを使ってファイルをタイプセットしてあってもうまく機能します：
pdfTeX・pdfLaTeX・TeX＋Ghostscript あるいは LaTeX＋Ghostscript ないしは XeTeX 
その他のエンジンでも。

</li>
<p>
<li>
<!--
Click on a word or phrase in the source file.
TeXShop will scroll the preview window to the  corresponding phrase and circle it in red.
Click on a word or phrase in the  preview window.
TeXShop will open the corresponding source file if it is not already open,
scroll the source to the appropriate spot,
and highlight the source phrase in yellow.
-->
ソース文書内で単語ないしは語句をクリックします──
TeXShop は対応する語句までプレビューウィンドウをスクロールさせ、赤い丸を付けます。
プレビューウィンドウ内で単語ないしは語句をクリックします──
TeXShop は<small>（それがまだ開かれていなければ）</small>対応するソースファイルを開き、
適切な位置までソースをスクロールさせ、
ソース内の語句を黄色でハイライトします。
</li>
<p>
<li>
<!--
Of course source strings and output strings need not be equal.
The new method  sidesteps this problem by searching for nearby text until it finds a match.
Read TeXShop help for details.
-->
もちろんソースの文字列とプレビューの文字列とが同じである必要はありません。
新しい手法では、
一致する語句を見つけるまで付近のテキストを検索することによってこの問題を回避しています。
詳細については TeXShop ヘルプをご覧ください。
</li>
<p>
<li>
<!--
A new TeXShop preference item selects the synchronization method to be used:
the old pdfsync method,
the new search method,
or a combination in which the new search is used,
but the program falls back on pdfsync
if the new search does not succeed.
-->
新しい TeXShop の環境設定項目では、
利用するシンクロナイゼーションの方式を選択できます：
従来の pdfsync 方式、新しい検索方式、
あるいはその組み合わせ――
新しい検索方式が用いられものの、
うまくゆかない場合には pdfsync をあてにすることができる、というもの。
</li>
<p>
<li>
<!--
TeXShop 2.00 uses Apple's PDFKit to display the pdf preview window.
This software is introduced in system 10.4.0 (Tiger).
PDFKit makes the following new features possible:
-->
TeXShop 2.00 では、
pdf プレビューウィンドウの表示に Apple の PDFKit を利用しています。
このソフトウェアはシステム 10.4.0（Tiger）で導入されました。
PDFKit によって、以下のような新機能が利用可能になります：
</li>
<p>

<ul>
	<li>
<!--
	TeXShop supports hyperlinks and the TeX hyperref package.
	To activate this feature,
	add the line
-->
	TeXShop はハイパーリンクおよび
		TeX の hyperref パッケージをサポートします。
		この機能を有効にするには、
		次のような１行をソース文書のヘッダ部分に追加します。
<p>
	<dl>
		<dd>\usepackage[colorlinks=true, pdfstartview=FitV, linkcolor=blue, citecolor=blue, urlcolor=blue]{hyperref}
	</dl>
<p>
<!--
to the heading of the source document.
Links to external web sites can then be added  to tex documents using commands like
-->
外部のウェブサイトへのリンクを TeX 文書に付け加えるには、
次のようなコマンドを使います。
<p>
	<dl>
		<dd>\href{http://www.uoregon.edu/~koch/}{Koch homepage}
	</dl>
<p>
<!--
Links to other portions of the tex document can be added using commands like
-->
TeX 文書内の別の箇所へリンクさせるには、
以下のようなコマンドを使います。
<p>
	<dl>
		<dd> \hyperlink{lemniscate}{Graph of Lemniscate}
	</dl>
<p>
<!--
where the tag "lemniscate" is created using a command like
-->
"lemniscate" というタグの位置は、
下記のようなコマンドを使って作成します。
<p>
	<dl>
		<dd> \hypertarget{lemniscate}{}
	</dl>

<p>
<!--
To navigate with these links,
choose the new "text" tool and clink  on the colored links.
-->
こうしたリンクを利用して移動を行なうには、
新しい「テキスト」ツールを選択した上で色の付いたリンク部分をクリックします。
<p>
<li>
<!--
The preview window toolbar contains "Back" and "Forward" buttons
so one can jump to a spot using a link,
and then jump back.
-->
プレビューウィンドウのツールバーに、
「戻る」「進む」というボタンがあるので、
リンク先に移動した後でもすぐに戻ることができます。
</li>
<p>
<li>
<!--
Hyperref.sty automatically adds links to citations,
so readers can rapidly jump from a citation to the corresponding bibliography entry.
It automatically adds links to the table of contents
so readers can jump to the corresponding section.
-->
hyperref.sty は引用部分に自動でリンクを追加するので、
読者は引用部分から参考文献目録の項目へと即座にジャンプすることができます。
目次へのリンクも自動で付け加えられるので、
読者は対応するセクションにジャンプすることができます。
</li>
<p>
<li>
<!--
The hyperref package creates a document outline.
For example,
the main outline of a book is a list of chapters;
each chapter entry contains a list of sections,
and so forth.
To see this outline and navigate through the document with it,
use the new "drawer tool" to display the pdf window's drawer.
-->
hyperref パッケージは文書のアウトラインを生成します。
たとえば、
書籍の主要なアウトラインはチャプターの一覧です；
そして各チャプターにはセクションの一覧が含まれる、などなど。
このアウトラインを参照し、文書内を移動するには、
新しい「ドロワー・ツール」を使ってプレビューウィンドウのドロワーを表示させます。
</li>
<p>
<li>
<!--
The text tool can also be used to select a portion of text in the preview window
and copy this selection to an editor.
This differs from the "pdf selection tool"
which copies a portion  of the document as a pdf illustration ~~-
the text tool copies editable text.
-->
テキストツールを使ってプレビューウィンドウ内のテキストの一部分を選択できますが、
この選択部分はエディタにコピーすることができます。
このテキストツールでは「PDF選択ツール」とは異なり、
文書の一部を pdf 形式の図像としてコピーするのではなく、
編集可能なテキストとしてコピーします。
</li>
<p>
<li>
<!--
Searching the pdf preview is supported.
Use the search tools in the bottom half of the window's drawer.
-->
pdf プレビューの検索をサポートしました。
プレビューウィンドウのドロワーの下方にある検索ツールを用いてください。
<p>
<li>
<!--
PDFKit brings additional polish to the display of pdf documents.
It supports documents with isolated rotated pages,
and correctly prints rotated pages in landscape mode.
It supports live update of window resizing
if the magnification preference is set to "fit to window."
It has better support for keyboard shortcuts:
arrow keys, page up and page down keys, etc.
-->
PDFKit により PDF 文書の表示がさらに洗練されました。
個別に回転させたページを含む文書をサポートし、
横置きモードでも回転させたページをきちんと印刷できます。
また、ズーム倍率を「ウィンドウに合わせる」に設定しておけば、
ウィンドウをリサイズする際のライプ・アップデートもサポートします。
さらに、キーボード・ショートカットのサポートも向上しています：
カーソルキー、page up キーや page down キーなどです。
</li>
	<p>
	</ul>
	</ul>

<!--<p><h6>New Features in 2.00 and 1.37</h6></p>-->
<p><h6>2.00 と 1.37 で共通の新機能：</h6></p>

<p>
<!--The remaining new features are available in both new versions.-->
　<small>残りの新機能は 2.00 と 1.37 いずれでも利用可能です。</small>

<ul>
<li>
<!--
Earlier versions of TeXShop allowed users
to set the typesetting engine of a file,
its encoding,
and its root file
by adding appropriate comments to the top of the source file.
For example,
the following commands set the typesetting engine to xelatex,
the encoding to UTF-8 Unicode,
and the root file to ../Main.tex:
-->
以前のバージョンの TeXShop では、
文書のタイプセット・エンジン、
エンコーディング方式、
ルートファイルを設定するのに、
ソースファイルの冒頭にしかるべきコメントを付加していました。
たとえば、
以下の一連のコマンドは、
タイプセット・エンジンを XeLaTeX に、
エンコーディングを UTF-8 Unicode に、
ルートファイルを ../Main.tex に設定するものでした：
<p>
	<ul>
		<li>%&xelatex</li>
		<li>%&encoding=UTF-8 Unicode</li>
		<li>%SourceDoc ../Main.tex</li>
</ul>
<p>
<!--
But this syntax was a mistake
because the symbols "%&" are reserved for the use of TeX.
-->
けれどもこの構文は誤りでした――
というのも「%&」という記号は、
TeX で使用するため予約済みだったのです。
</li>
<p>
<li>
<!--
In versions 1.37 and 2.00 of TeXShop,
the syntax has been changed to the following:
-->
バージョン 1.37 と 2.00 の TeXShop では、
以下のように構文を変更しました：

<p> 
	<ul>
		<li>%!TEX TS-program = xelatex</li>
		<li>%!TEX encoding = UTF-8 Unicode</li>
		<li>%!TEX root = ../Main.tex</li>
	</ul>
<p>
<!--
It you used the earlier facility,
you need to change your old source files to the new syntax.
I'm very sorry to cause this work,
but the change is really necessary.
-->
この機能を利用していた人は、
これまでのソースファイルを新しい構文に変更する必要があります。
このような作業をしてもらわねばならないのは心苦しいことですが、
ほんとうに必要な変更なのです。
</li>
<p>
<li>
<!--
If you are in the middle of a project and cannot make the change now,
you can temporarily set a hidden preference to revert to the old syntax.
To do so,
open Apple's Terminal program and type
-->
もしもプロジェクトの最中で今すぐ変更ができない場合は、
隠れた環境設定で一時的に古い構文に戻すことができます。
戻すには、Terminal を起動して次のようにタイプします――
<p>
	<dl>
		<dd> defaults write TeXShop UseOldHeadingCommands YES </li>
	</dl>
<p>
<!--
Once this is done,
the new commands will be recognized
but the old commands will also work.
However,
I recommend turning this preference off as soon as possible.
-->
こうすれば、
新しいコマンドが認識されるだけでなく、
古いコマンドも同様に機能します。
ですが、
この環境設定はなるべく早いうちにオフにするようにしてください。
</li>
<p>
<li>
<!--
Commands have been added to the default Macros menu
which insert the symbols "%!TEX TS-program = "
and "%!TEX encoding = "
and "%!TEX root = "
into the source document;
new users will see these entries.
Users who are upgrading can easily add these symbols as well.
To add the program entry,
choose "Open Macro Editor" under the Macro menu.
Click the "New Item" button,
name the item "Program" and set its content to
-->
「<tt>%!TEX TS-program = </tt>」
「<tt>%!TEX encoding = </tt>」
「<tt>%!TEX root = </tt>」
という符号をソース文書に挿入するコマンドを、
デフォルトのマクロメニューに追加しました；
新規のユーザはこれらの項目を確認できることでしょう。
アップグレードしたユーザもまた容易に追加できます。
「プログラム」という項目を追加するには、
「マクロ」メニューから「マクロエディタを開く...」を選択して、
「新規マクロ」ボタンをクリックし、
項目名を「プログラム」として内容を以下のように設定します――
<p>
	<dl>
		<dd>%!TEX TS-program = #INS#
	</dl>
<p>
<!--
Repeat for the "Encoding" and "Root" items.
-->
「エンコーディング」と「ルート」についても同様にします。
</li>
<p>
<li>
<!--
Martin Kerz added a "Check for Updates..." command to TeXShop.
He also designed the new TeXShop web page.
Thanks!
-->
Martin Kerz により「アップデートを確認...」というコマンドが TeXShop に追加されました。
彼はまた TeXShop の新しいウェブサイトのデザインも手がけました。
ありがとう！
</li>
<p>
<li>
<!--
OgreKit for searching has been upgraded to the latest 2.0.1 version.
-->
検索用の OgreKit を最新のバージョン 2.0.1 にアップグレードしました。
</li>
<p>
<li>
<!--
Additional filetypes can be edited,
including files with extensions "abc", "bst", "bib", "lp", and "pdf".
The addition of "pdf" allows TeXShop to be chosen as the default pdf viewer.
A new pdf icon has been created
so the system can use it on pdf files it will display in TeXShop.
-->
編集可能なファイルタイプを追加しました――
拡張子が「abc」「bst」「bib」「lp」それに「pdf」となっているファイルです。
「pdf」の追加により TeXShop をデフォルトの PDF ビューワとして選択できるようになりました。
新しい PDF アイコンを作成したので、システムの方でも、
TeXShop で表示する pdf ファイルにはそのアイコンが使用されます。
</li>
<p>
<li>
<!--
TeXShop has always had a "Revert To Saved" item under the File menu,
but it has never worked!
Sorry.
This is fixed.
-->
TeXShop の「ファイル」メニュー内に「最後に保存した状態に戻す」という項目がありますが、
これは機能していませんでした！
すみません。
これを修正しました。
</li>
<p> 
<li>
<!--
David Reitter modified the selection code
so if the uses clicks on a control word like \gamma,
the initial "\" symbol will also be chosen.
-->
David Reitter が文字列選択のコードを改良したので、
\gamma のような制御綴り上で複数回クリックすれば、
先頭の「\」という記号もいっしょに選択されます。
</li>
<p>
<li>
<!--
A new preference item "Select on Activate" has been added.
When this item is checked,
a mouse click on the text window will select this window
and also place the cursor at the spot that was clicked.
If the item is not checked,
the initial mouse click will only activate the window
and a separate click is needed to position the cursor.
-->
新しい環境設定項目「選択時にカーソルを移動」を追加しました。
この項目にチェックを入れ、
ソースウィンドウ上でマウスクリックをすると、
ウィンドウが選択されるのと同時にクリックした位置にカーソルが挿入されます。
この項目にチェックを入れていない場合は、
最初のクリックではウィンドウをアクティブにするだけなので、
カーソルを置くにはまた別にクリックをする必要があります。

</li>
<p>
<li>
<!--
New hidden preferences were added for users
who change the default foreground and background colors of the editing window.
These preferences set the color of the insertion point.
Without these preferences,
the insertion point could become invisible.
To set the insertion point to white, for example,
-->
ソースウィンドウでデフォルトの文字色と背景色を変更しているユーザ用に、
隠れた環境設定項目を新たに追加しました。
この新しい項目で挿入ポインタの色を設定します。
この設定なしでは、挿入ポインタが見えなくなってしまいかねませんでした。
挿入ポインタをたとえば白に設定するには、次のようにします――
</li>
<p>
	<dl>
		<dd>defaults write TeXShop insertionpoint_R 1.0
		<dd>defaults write TeXShop insertionpoint_G 1.0
		<dd>defaults write TeXShop insertionpoint_B 1.0
	</dl>
<p>
<li>
<!--
When a file is typeset,
all open changed files with the same root are first saved.
-->
文書をタイプセットする際、
ルートが同じで、開いて編集したすべてのファイルを最初に保存します。
</li>
<p>
<li>
<!--
Improvements were made in the pdfsync code.
-->
pdfsync のコードを改善しました。
</li>
<p>
<li>
<!--
In previous versions,
it was possible to add a Macro button to the Preview Window Toolbar in English,
but not in other localizations.
This is fixed thanks to Juan Luis Varona.
-->
先のバージョンでは、
英語版でのみプレビューウィンドウのツールバーにマクロボタンを追加することができましたが、
他国語へのローカライズ版ではできませんでした。
これを修正しました――Juan Luis Varona に感謝。
</li>
<p>
<li>
<!--
New Japanese Help by Yoshihisa Okazaki with help from Seiji Zenitani.
-->
銭谷誠司さんの助力を得て、
岡崎祥久さんが新しい日本語ヘルプを追加しました。
</li>
<p>
<li>
<!--
A proxy icon is now added to the title of the preview window.
This icon can be dragged to the desktop or other folders to create a copy of the pdf file.
The source window has always had a proxy icon.
Thanks to Rene Donner for suggesting this feature and explaining how to implement it.
-->
プレビューウィンドウのタイトル部分にプロキシ・アイコンを付け加えました。
このアイコンをドラッグして、
デスクトップや他のフォルダに PDF ファイルのコピーを作ることができます。
ソースウィンドウには前々からプロキシ・アイコンがあります。
この機能を提案し、どう実装すればいいのか説明してくれた Rene Donner に感謝します。
</li>

</ul> 



<p><h5>バージョン1.36は公開されませんでした。</h5></p>

<p><h5>バージョン1.35では TeXShop にさらなる機能を追加し、いくつかのバグを修正しました。</h5></p>
<p><h6>新機能：</h6></p>

<p>

<ul>

<li>
最近の重要な開発は、 Jonathan Kew による XeTeX と XeLaTeX のリリースです。以下を参照のこと。
		<p>
			<dl>
				<dd>http://scripts.sil.org/xetex
			</dl>
		<p>
XeTeX は Gerben Wierda による標準的なインストールには含まれていませんが、 Wierda の i-Installer を使い、オプション・インストールとして Jonathan Kew のところから入手できます。 XeTeX は Macintosh のフォントに直接アクセスできるので、 TeX 文書を Lucida Grande や Zapfino その他のフォントを使って書くことができます。さらに XeTeX は Unicode を理解するので、たとえばアラビア語を右から左へとソースウィンドウに打ち込んで TeX でタイプセットし、出力ウィンドウでアラビア語を得ることができます。具体的には、 XeTeX のソース文書は UTF-8 Unicode 形式になっています。
		<p>
TeXShop 1.35 では XeTeX を以下のように直接サポートします：
		<p>
		<ul>
			<li>XeTeX と XeLaTeX は、ソースウィンドウのプルダウンメニュー「タイプセット」から利用可能です
			<li>環境設定を使って、 XeTeX と XeLaTeX をデフォルトのタイプセット・エンジンにすることができます
			<li>ソースの冒頭10行以内に次のような書式がある場合──
				<p>
					<dl>
<!--						<dd>%&encoding=UTF-8 Unicode-->
						<dd>%!TEX encoding = UTF-8 Unicode
					</dl>
				<p>
				他の文書用に選択したデフォルトのエンコーディング方式に関わらず、 UTF-8 Unicode でファイルが読み込まれ保存されます
			<li>もしソースの第１行目が次のいずれかの書式になっている場合──
				<p>
					<dl>
<!--						<dd>%&program=xetex-->
						<dd>%!TEX TS-program = xetex
						<p>
<!--						<dd>%&program=xelatex-->
						<dd>%!TEX TS-program = xelatex
					</dl>
				<p>
				タイプセット・オプションでの選択によらず、特定のプログラムが用いられます
		</ul>
<li>
こうした XeTeX の特徴は、 TeXShop にタイプセット・エンジンを追加する新しい一般的な方法の特例となっています。 ~/Library/TeXShop 内に「Engines」という名前のフォルダがあります ； このフォルダに入っているファイルは、タイプセット・プログラムを呼び出せるシェル・スクリプトです。 TeXShop を最初に起動すると、このフォルダを調べ、ファイルのスクリプト名を加え、プルダウンメニュー「タイプセット」に含めます。この中から１つを選んでタイプセット・ボタンを押せば、スクリプトが呼び出されます。ユーザは自分で独自のスクリプトを書き、それを「Engines」フォルダに追加することができます。
<p>
~/Library/TeXShop/Engines 内の項目は、環境設定でデフォルトのタイプセット・エンジンに指定できます。

<!--
<p>
TeXShop の以前のバージョンでは、ソースコードの第１行目に %&tex ・ %&latex ・ %&pdftex などと書き込んでおくことで、タイプセット・プログラムを設定できます。互換性のため、この方法もまだ機能しますが、今では %&program=tex ・ %&program=latex ・ %&program=pdftex などのほうが好ましい構文です。
-->
<p>
ソースコードの冒頭20行以内のどこかに、
下記のいずれかを書き込んでおくことで、
タイプセット・プログラムを設定することができます――

<p>
	<dl>
		<dd>%!TEX TS-program = tex
		<dd>%!TEX TS-program = latex
		<dd>%!TEX TS-program = pdftex
		<dd>%!TEX TS-program = pdflatex
		<dd>%!TEX TS-program = personaltex
		<dd>%!TEX TS-program = personallatex
	</dl>
</p>

<p>
この新しい構文は、
~/Library/TeXShop/Engines に追加した新規のタイプセット・エンジンに対しても機能します。
たとえば、
<tt>%!TEX TS-program = xelatex</tt>
と書けば XeLaTeX が選定されます。

<li>
ファイルを開いたり保存したりするのに用いるエンコーディング方式は、次のような１行を、
			<p>
				<dl>
<!--					<dd>%&encoding=UTF-8 Unicode-->
					<dd>%!TEX encoding = UTF-8 Unicode
				</dl>
			<p>
<!--ソース文書の冒頭10行以内に含めることで設定できます。-->
ソース文書の冒頭20行以内に含めることで設定できます。
サポートしているいずれのエンコーディング方式でもこれは可能です ； TeXShop のヘルプ・ファイルには、それぞれのエンコーディング方式の正確な文字列を載せてあります。この動作を回避するには、オプションキーを押しながらファイルを開きます。

<p>
<li>
上述の変更と一致させるために、
以前の <tt>SourceDoc</tt> 構文を修正しました。
たとえば、
<tt>../Main.tex</tt> をルートファイルに設定するには、
	<dl>
		<dd>%!TEX root = ../Main.tex
	</dl>
と書きます。

<p>
<small>
（
プログラム、エンコーディング方式、SourceDoc の設定に関しては、
古い構文もまだサポートされてはいますが、
新しい構文に変更することをお勧めします。
）
</small>

<p>

<li>
TeXShop には園部勲さんによる新しい検索パネルがあります。このパネルは正規表現をサポートしています。環境設定で新しいパネルと従来の Apple 標準のパネルとを切り替えることができます。新しい検索パネルは園部さんの OgreKit ──正規表現を扱うための Cocoa フレームワーク、に依存しています。以下を参照のこと──
			<p>
				<dl>
					<dd>http://www-gauge.scphys.kyoto-u.ac.jp/~sonobe/OgreKit/
				</dl>
			<p>
OgreKit は BSD ライセンスをやや修正したライセンスに基づいて配布されています。同ライセンスは、 TeXShop ソースのディストリビューション内の OgreKit Framework フォルダの中にあるドキュメントで見られます。 OgreKit には Panther が必要になりますので、新しいパネルは Panther を稼働させているマシンでのみ表示されます。
		<p>
ユーザが自身で発見できることですが、新しい検索パネルには多くの素晴らしい機能があります。 OgreKit は TeXShop の「編集」メニューの「検索」サブメニューを変更し、より拡張されたメニューに置き換えます。これは各国語版へのローカライズ作業を混乱させるかもしれません──というのも、 TeXShop の nib ファイル内のメニューは、 TeXShop を実行しているときのものではないからです。 nib ファイルの「検索」メニューは変更すべきではありません──システム10.2で表示されてしまうからです。それをせずに OgreKit のメニューに対応するには、 TeXShop のソースでのローカライズが必要になります。検索パネルには、どのように検索を行なうかを制御するボタン類があります ； これらのボタンの設定は次回以降にも引き継がれます。思ったとおりに語句を見つけ出せるようになるまで調整したら、後はリラックスしてください。
		<p>

<li>
TeXShop 1.35 は、 Piero D'Ancona と J. Laurens による最新の pdfsync.sty とともに配布されています。最新版は TeXShop 1.34 で同梱したバージョンに起因するタイプセットの問題を解消しています。 TeXShop では、 Piero D'Ancona と J. Laurens による更新に、数カ月ほど追随していませんでした ； ごめんなさい！
		<p>
新バージョンでは、\include と \input をサポートしています ； 後者を用いるには「\input thisfile」ではなく「\input{thisfile}」という構文を使わねばなりません。新バージョンでは「\pdfsync」 「\pdfsyncstart」 「\pdfsyncstop」をサポートします。これらのコマンドのうち、最初のものは、ポイントを参照したい任意の場所で使ってください。もし pdfsync がコードを止めてしまうようなら、原因となるセクションを「\pdfsyncstop」と「\pdfsyncstart」のペアで括ってください。
		<p>

<li>
myfile.tex をタイプセットするとします。シンクロナイゼーション用のデータを格納するために pdfsync は、 myfile.pdfsync という名前のファアイルを生成します。大まかに言って、各データ・エントリにはシンクロナイゼーション・ポイントが以下のように記述されています：
			<p>
				<ul>
					<li>ポイントの置かれたプレビュー文書のページ番号
					<li>このページ上の位置
					<li>この特定の出力を生成するソースファイルの名前
					<li>このソースファイル内の該当する行番号
				</ul>
			<p>
こうしたシンクロナイゼーション・ポイントを TeXShop で表示させる方法があります。プレビュー・ウィンドウのツールバーには「Sync」という新しいチェックボックスがあります。デフォルトでは見えていません ； 「ウィンドウ」メニューにある「ツールバーをカスタマイズ...」を使って選び取ってください。チェックボックスをチェックすると、シンクロナイゼーション・ポイントが見えるようになります。
		<p>
デフォルトでは、プレビュー・ウィンドウが最初に表示された際にこのチェックは入っていません。隠れた環境設定でこれを変更できます：
			<p>
				<dl>
					<dd>defaults write TeXShop ShowSyncMarks YES
				</dl>
			<p>

<li>
TeXShop 1.35 には Jonas Zimmermann による新しい行列コードが含まれています。行列パネルでテーブルが作成できるようになりました。パネルを試して新機能を見出してください。行列のデフォルトのサイズを設定する隠れた環境設定があります：
			<p>
				<dl>
					<dd>defaults write TeXShop matrixsize 12
				</dl>
			<p>
ごく少数のユーザは  ~/Library/TeXShop/MatrixPanel にある「matrixpanel.plist」を変更しているかもしれません。この plist は拡張されています ； 新しいリストは「matrixpanel_1.plist」です。独自の変更を加えるにはこちらのファイルを編集してください。
		<p>

<li>
以前のバージョンの TeXShop では、どこか他の場所をクリックした後でテキスト編集をしようとして編集ウィンドウをクリックした場合、カーソルを正しい位置に入れるには、クリックを２度しなければなりませんでした。これが変更されました ； 編集テキスト上で１度だけクリックすれば、位置が認識されカーソルが入ります。
		<p>

<li>
マクロ・メニュー下で AppleScript を実行させると、 TeXShop フォルダに組み込まれている小さな補助アプリケーションが起動してスクリプトを実行します。なぜかというと「latex」のようなコマンドを実行して、もしソースにエラーがあった場合、コンソールが表示されユーザからの入力に応じようとしますが、 TeXShop のイベント・ループは AppleScript の動作中は実行されず、ユーザ入力ができないからです。
		<p>
多くの AppleScript では、この問題はありません。 TeXShop では今回から AppleScript マクロを次のコマンドで書き始められるようになったということです──
			<p>
				<dl>
					<dd>-- applescript direct
				</dl>
			<p>
この方法で書かれた場合、スクリプトは、小さな補助アプリケーションではなく、直接 TeXShop で実行されるのです。
		<p>

<li>
「作業ファイルを削除」というメニューコマンドが追加され、コンソールにも「作業ファイルを削除」というボタンが付きました。実行するとこれらのコマンドは、現在のソースがあるディレクトリ内にあり、ソースと名前が同じで、拡張子に aux ・ bbl ・ blg ・ brf ・ glo ・ idx ・ idv ・ ilg ・ ind ・ ioa ・ lof ・ log ・ lot ・ mtc ・ mlf ・ out ・ pdfsync ・ toc が付いたファイルをすべてゴミ箱に移動させます。このコマンドの提案と拡張子のリストの作成を Will Robertson に感謝します。
		<p>
隠れた環境設定で追加の拡張子をこのリストに加えることができます。 「dvi」を加えるには──
			<p>
				<dl>
					<dd>defaults write TeXShop OtherTrashExtensions -array-add "dvi"
				</dl>
			<p>
こうした拡張子をひとつずつこの方法で追加できます。追加したものを取り除くには──
		<p>
			<dl>
				<dd>defaults write TeXShop OtherTrashExtensions -array
			</dl>
		<p>
上記のオリジナルの拡張子リストは常に有効なままとなっています。
		<p>
書籍のプロジェクトを想定してください──あるフォルダの中に main.tex というファイルがあり、\include{chapter1/chapter1.tex} のようなコマンドを使ってアクセスしているサブフォルダ内に各章があるとします。この書籍をタイプセットすると、 main.aux やその他のファイルがメインフォルダ内に現われ、サブフォルダ内には chapter1.aux が現われます。そうなると「作業ファイルを削除」コマンドは、完全なクリーンナップを行なうことができません。けれども、このメニューアイテムを選択するとき、またはコンソール・ウィンドウのボタンを押すときに、オプションキーを押さえておくと、
			<p>
				<ul>
					<li>SourceDoc とルートファイルの情報をもとにしてルート文書を探します
					<li>上記の該当する拡張子の付いたファイルはいずれも、ルートファイルの名前と一致せずとも、メインフォルダとすべてのサブフォルダの中からゴミ箱へと移されます
				</ul>
			<p>
「作業ファイルを削除」で常にこの広範囲なクリーンナップを行なえるようにしたがる、向こう見ずなユーザもいるかもしれません。隠れた環境設定でこれができます：
			<p>
				<dl>
					<dd>defaults write TeXShop AggressiveTrashAUX YES
				</dl>
			<p>

<li>
Will Robertson により、新しいテンプレート集が追加されました。これにはたっぷりとコメントが付けられています。ユーザが自分自身の要求に見合うように編集するのを意図してのことです。テンプレートは TeXShop を最初に起動したときにのみ──あるいは、テンプレート・フォルダが  ~/Library/TeXShop から完全に取り除かれていると、インストールされます。が、 Will のテンプレートは、 TeXShop ディストリビューション内の「More」という名前のフォルダの中にも入っています ； 以前からのユーザは「More」フォルダを ~/Library/TeXShop/Templates に移すことでテンプレートを入手できます。
<p>
<li>
テーブルや配列を作成したり、参照を挿入したり、他のプロジェクト・ファイルを手早く開くための新しいマクロが、 Will Robertson によって追加されました。これらのマクロは TeX-On-MacOSX メーリングリストで賞賛されているものです。このマクロは新規のユーザが利用可能となっています ； 以前からのユーザは、 TeXShop 1.35 に付属している簡単な指示に従って入手することができます。
<p>
<li>
teTeX ツリー内のファイルを調べるためのマクロが追加されました。たとえば、マクロが提示するダイアログに「article.sty」と打ち込むと、 kpsewhitch を使ってこのファイルをツリー内で見つけ出し、 TeXShop で開きます。
<p>
<li>
ソースウィンドウのテキストの色を設定する隠れた環境設定があります──
			<p>
				<dl>
					<dd>defaults write TeXShop foreground_R 0.3
					<dd>defaults write TeXShop foreground_G 0.3
					<dd>defaults write TeXShop foreground_B 0.3
				</dl>
			<p>
この色は「ソースのカラー表示」がオンになっていると現われます ； でなければ黒になり、フォントメニューで色を選択できます。
		<p>
ソースウィンドウの背景色を設定する既存の隠れた環境設定といっしょに使えば、黒地に白文字やその他の色の組み合わせでソースを書くのに、上記のコマンドを使えます。 TeXShop にはソースウィンドウの色を設定したり、またデフォルトの色に戻したりするマクロがあります。
		<p>

<li>
ソース、プレビュー、コンソールの各ウィンドウの透明度をそれぞれに設定する隠れた環境設定があります。
			<p>
				<dl>
					<dd>defaults write TeXShop ConsoleWindowAlpha 0.75
					<dd>defaults write TeXShop SourceWindowAlpha 0.75
					<dd>defaults write TeXShop PreviewWindowAlpha 0.75
				</dl>
			<p>
ここでアルファ値が 0.00 なら完全に透明となり、アルファ値が 1.00 なら完全に不透明となります。これらのコマンドは用心してお使いください！
		<p>

<li>
TeXShop に「文書情報」が用意されました──これは文書内の単語数や行数、文字数を表示します。これは次のようなコールで得られるものです──
			<p>
				<dl>
					<dd>detex myfile | wc
				</dl>
			<p>
最初の呼び出しで、ディスク上の文書がテストされます。文書に変更が施された後、 「アップデート」ボタンで文書を保存し、 detex を再度呼び出します。 detex コマンドが TeX のコマンドを取り除きますが、ワード・カウントは今のところ概算でしかありません。 input ないしは include されたファイルもこのコマンドで勘定されます。
		<p>

<li>
Martin Kerz による新しいドイツ語版のヘルプ。 Kerz はまた TeXShop ヘルプのウィンドウを、 Apple の現行のガイドラインに沿ってデザインし直してくれました。この変更は英語版とドイツ語版で見ることができますが、その他のローカライズ版では見られないかもしれません。<small>この日本語版も新デザインになっています。</small>
<p>
<li>
ファイルをドラッグ＆ドロップした際に、エイリアスが解決されるようになりました。なので、グラフィック（またはその他の）ファイルのエイリアスを、ソースにドラッグ＆ドロップして利用することができます。エイリアス書類の名前をじかに入力しても機能しません──というのも、 TeX エンジンはエイリアスを理解しないからです<small>（シンボリックリンクは理解しますが）</small>。
<p>
<li>
伊東悠さんと銭谷誠司さんのコードにより、日本語環境でいくつかの変更が行なわれました。日本語エンコーディングに新しく Shift JIS X0213 が用意されました──これは日本での新しい標準となるものです。 pTeX 用に utf.sty もサポートされるようになりました。この変更以前には、日本語 pTeX は 6,000 字の漢字しかサポートしていませんでしたが、 uft.sty は 20,300 以上もの文字をサポートします。これは環境設定項目の「詳細」でオンにできます。オンにすると、 TeXShop は pTeX が対応していない文字を utf.sty のコードとして書き出します。たとえば、 Unicode 文字は \UTF{Hex code} となり、非-Unicode 文字は \CID{glyph ID} となります。
<p>
<li>
銭谷さんはまた、日本語用の新しいデフォルト設定も追加しました。これまで日本語 pTeX のディストリビューションは、個々に「altpdflatex」を提供していましたが、これが初心者には混乱をもたらしていました。 TeXShop の新しいバージョンには pTeX でタイプセットするスクリプト<small>（井上浩一さん提供）</small>が組み込まれており、 ~/Library/TeXShop/bin にインストールされます。環境設定にある日本語用の新しいデフォルト設定が、新しいスクリプトを利用できるよう TeXShop を自動的にセットアップします。
<p>
<li>
Adam Si のリクエストにより、以下の中国語エンコーディングが追加されました：Mac Chinese Traditional ・ Mac Chinese Simplified ・ DOS Chinese Traditional ・ DOS Chinese Simplified ・ GBK ・ GB 2312 ・ GB 18030
<p>
<li>
岡崎祥久さんにより、新しく日本語ヘルプが追加されました。
<p>
<li>
新規のスペイン語版ローカライズとヘルプが追加されました。
<p>
<li>
拡張子 「.dn」 「.engine」の付いた書類を TeXShop で読み書きできるようになりました。
<p>
<li>
隠れた環境設定──
			<p>
				<dl>
					<dd>defaults write TeXShop BringPdfFrontOnAutomaticUpdate NO
				</dl>
			<p>
これにより、自動更新や、外部エディタ使用の際に、プレビュー・ウィンドウの位置をそのままにします。この環境設定は X11 エディタを使っているユーザからリクエストされたもので、これ以外では需要はなさそうです。
		<p>	
<p>
<li>
ユーザは時として「アーカイブとインストール」によって Mac OS X をアップグレードします。インストール後、 TeXShop は残っていますが、 teTeX はかき消えています。こうしたユーザが初めてタイプセットを行なおうとすると、 「pdflatex が見つかりません」とエラー・ダイアログに告げられます。このエラー・ダイアログを改訂し、この問題に関してありえそうな原因、および解決法について、より明瞭に説明するようにしました。
<p>
<li>
TeXShop の WEB ページに「LaTeX Documentation」というセクションを設け、おすすめの書籍の一覧を載せたり、インターネット上にあるフリーの LaTeX ガイドにリンクを張ったりしました。 WEB ページではまた、 Will Robertson による数多くの簡潔な LaTeX サンプルも利用可能となっています。

</ul>

<p><h6>修正されたバグ：</h6></p>
<p>
<ul>

<li>
多数のウィンドウを開いていると、ひとつのウィンドウから他のウィンドウに切り替えるのに長く時間がかかり、ディスクの急回転を引き起こしていました ； この間、 TeXShop は完全に反応しなくなっていました。このスローダウンはマクロ・コードのバグに起因するものでした。この問題が解消されました。

<li>
書き込み権限のないディレクトリで dvi ファイルを開くと、 TeXShop は対応する pdf ファイルを生成して表示することができませんでした。そこで pdf ファイルをテンポラリー・ディレクトリに生成して表示するようにしました。

<li>
コンソールにある強制終了ボタンを押し、その後でユーザが入力を行なってリターンを押すと、プログラムがクラッシュしていました。これを修正。

<li>
ウィンドウ内に表示されるべき２つの地味なエラー・ダイアログが、操作不能の「OK」ボタンとともにデスクトップに表示されていました。これを修正。

<li>
英語以外のローカライズ版において、 AppleScript 辞書を取得しようとするとTeXShop がクラッシュしていました。これを修正。

<li>
文書にルートファイルがあると、ソースウィンドウにある Bibtex などのツールが機能しませんでした。これを修正。

<li>
環境設定 > コピー > フォーマットを選択できない不具合が修正されました。<small>（1.35c 日本語版）</small>

</ul>

<hr>

<p><h5>バージョン1.34では TeXShop にさらなる機能を追加し、いくつかのバグを修正しました。</h5></p>
<p><h6>新機能：</h6></p>
<p>

	<ul>
		<li>Jonas Zimmermann （ zimmerleut@gmx.de ）による行列パネルの追加。大変ありがとう。
		<li>Claus Gerhardt のリクエストにより、 AppleScript コマンド「goto line」を追補。例──
				<dl>
					<dd><tt>tell front document of application "TeXShop"</tt>
					<dd><tt>goto line 15</tt>
					<dd><tt>end tell</tt>
				</dl>

		<li>pdfsync を初めて搭載。コマンドキーを押しながらプレビューウィンドウの一点をクリックすると、ソースファイル内の相当する位置に移動します。ソースファイルに「include」されているファイルがあった場合は、対応するファイルを開き、そのファイル内の箇所に移動します。詳細については「上級向けのヘルプ」の「Pdfsync」の項を参照のこと。この機能は pdfsync.sty に依存します── pdfsync.sty は Piero D'Ancona が作成し J&#x00E9;r&#x00F4;me Laurens によって改良されました。
		<li>さらに pdfsync には別の使い方も。ソースファイル<small>（ルートファイルを設定したものも含む）</small>内の一点を、コマンドキーを押しながらクリックすると、 pdf ファイルの対応するページを表示します。
	</ul>

<p><h6>修正されたバグ：</h6></p>
	<ul>
		<li>TeX ・ LaTeX ・ BibTeX ・ MakeIndex ・ MetaPost ・ ConTeXt それに MetaFont といったツールバーのボタンが、デフォルトのタイプセット・エンジンをリセットしてしまう。これはもう生じません。なので、 BibTeX ボタンを押した後、 command＋T で再度タイプセットを行なうことが可能です。
		<li>コンソールのウィンドウサイズを変えると「abort」ボタンがズレてしまう。以上２つのエラーの指摘を Sean Luke に感謝。

<li>command＋1 のキー操作でソースとプレビューウィンドウを交互に切り替え可能です。以前のバージョンでは、 myfile.texshop あるいは %SourceDoc でルートファイルが設定されているソースウィンドウでは、これが機能しませんでした。それを修正。ソースファイルで command＋1 を押すと、対応するプレビューウィンドウを前面にします。再び command＋1 を押せば、元のソースファイルが前面になります。プレビューウィンドウは複数のソースファイルに対応しているかもしれないので、 command＋1 で前面に来るのは、プレビューウィンドウへの切り替えを最後に command＋1 で行なったソースファイルとなります──以前に切り替えを行なったソースがなければ、ルートソースになります。

<li>Juan Luis Varona Malumbres による新規のスペイン語ヘルプ。ありがとう。

<li>印刷時に、ページ設定での「拡大縮小」を順守するようにしました。 「用紙サイズ」については、 teTeX 内で設定されるので顧慮していません。印刷は次のように行なわれます：印刷する文書の寸法は TeX で設定され、 pdf ファイル内にコード化される ； pdf は拡大縮小率が100％でない場合はリサイズされるが、そうでなければフルサイズで用紙中央に配置される ； 通常は文書のサイズと用紙のサイズは同じですが、違っている場合には、文書のふちを切り落とすことになるかもしれません。
</font>
</ul>


<hr>

<p><h5>バージョン1.33では TeXShop にさらなる機能を追加し、いくつかのバグを修正しました。</h5></p>
<p><h6>新機能：</h6></p>

<p>

<ul>
<li>バージョン1.33の改良点は、 AppleScript の拡充、マクロのサポートの向上、外部エディタとの相互関係の改善です。

<li>マクロのサポートの改善は Claus Gerhardt により促されました──彼はバージョン1.33に含まれるいくつかの便利なスクリプトを書きました。たとえば、あるスクリプトは htlatex を呼び出して LaTeX ファイルをウェブ用にタイプセットします。スクリプトは、ソースを保存し、タイプセットし、結果の html ファイルを Safari で開きます。つまりちょうど LaTeX のタイプセット・ボタンのように動作するわけですが、違っているのは、 pdf ファイルではなく html ファイルを生成し、 TeXShop ではなく Safari で html を表示するということです。この取り組みの優れている点は、ユーザ自身がスクリプトを書くことで同様に、新しいプログラムコードを待たずとも TeXShop に機能を追加できることです。

<li>TeX のタイプセットではしばしば、連続的な操作が必要になります。参考文献目録を含むファイルを処理するには、 LaTeX に次いで BibTeX を実行し、さらにもう２度 LaTeX を実行させねばなりません。これを自動的に行なうスクリプトが入っています。このスクリプトは最初に LaTeX を実行する前にソースを保存し、最後にプレビュー画面を更新します。ユーザはそれぞれのワークフローに合わせて簡単にこのスクリプトをカスタマイズできます。

<li>追加されたスクリプトには、ソースファイルを Windows の改行コードに変換したり、 Mac OS 9 の改行コードや UNIX の改行コードに変換したりするものもあります。 Mac OS X はいずれの改行コードでもそのまま理解しますが、多くのコンピュータはそれほどスマートではありません ； 改行コードの変換は、ファイルを友人に送る際に重宝します。こうした変換は Craig Stuart Sapp の作ったバイナリ「flip」を利用しています。詳細については <A HREF="http://ccrma-www.stanford.edu/~craig/utility/flip/">http://ccrma-www.stanford.edu/~craig/utility/flip/</A> を参照のこと。

<li>pdfselect を呼び出すスクリプトも入っており、これは pdf 文書の一部を抜粋します。１つ目のファイルには TeX 文書の３〜７ページが含まれ、２つ目の文書には29ページが、３つ目のファイルには31〜36ページが含まれる、というようなことが可能です。このコードをマクロ・メニューに入れておく利点は、ユーザ・インターフェースが用意されているということです──ユーザは pdfselect を呼び出すときの約束事を覚えておかずともよいし、 Terminal に切り替える必要もありません。

<li>#DOCUMENTNAME# 変数がマクロエディタに追加されました──これは呼び出す文書の名前を AppleScript コマンドに渡します。

<li>以下の AppleScript コマンドが TeXShop に追加されました。これらのコマンドを用いてスクリプトを書くための詳細については、 TeXShop ヘルプをお調べください。
	<p>
		<ul>
			<li> typeset
			<li> latex		
			<li> tex		
			<li> bibtex		
			<li> context
			<li> metapost
			<li> makeindex
			<li> typesetinteractive
			<li> latexinteractive		
			<li> texinteractive		
			<li> bibtexinteractive		
			<li> contextinteractive
			<li> metapostinteractive
			<li> makeindexinteractive
			<li> typeset
			<li> refreshpdf
			<li> refreshtext 
			<li> taskdone
		</ul>
<p>
<li>Joachim Kock からの促しにより、外部エディタに対するサポートを改善。いくつかの変更が行なわれました：

<ul>
<li>外部エディタ・モードで作業しているのであれば、プレビューウィンドウを継続的に更新する環境設定をオンにできるようになりました。 TeXShop は１秒に１度、 pdf ファイルが更新されているかどうかをチェックします。更新されていれば、 pdf 画面が再描画されます。

<li>更新チェックの間隔は、 RefreshTime という隠れた環境設定項目でコントロールできます。秒単位で間隔を（たとえば2.19秒ごとに）変更するには次のようにします──
<p>	
			<tt>defaults write TeXShop RefreshTime 2.19</tt>
<p>

<li>AppleScript コマンドのサポートが追加されたので、外部のアプリケーションから TeXShop にコマンドを送れるようになりました。外部エディタで重要となるのは以下のようなスクリプト・コマンドです──
<p>
		<ul>
		<li>	latexinteractive	
		<li>	texinteractive	
		<li>	bibtexinteractive	
		<li>	contextinteractive
		<li>	metapostinteractive
		<li>	makeindexinteractive
		<li>	typesetinteractive
		<li>	refreshpdf
		<li>	taskdone
		<li>	open_for_externaleditor
		</ul>
<p>
最初の７つのコマンドは、 TeXShop のタイプセット・エンジンを呼び出します。これらのコマンドの１つが呼び出されると、タイプセット処理が完了していなくても、コントロールはすぐに呼び出し側のプログラムに戻ります。 taskdone は、処理中は FALSE を返し、完了すれば TRUE を返します──なので、呼び出し側のプログラムでいくつかのコマンドを送りたい場合にも、ひとつのコマンドを送った後、それが完了したかどうかを調べてから、次のコマンドを送ることができます。

<li>Refreshpdf はプレビュー画面を更新しますが、継続的な自動更新の代わりに、これを使って画面をコントロールできます。処理が終了次第、タイプセット・コマンドが自動的に画面を更新します。

<li>open_for_externaleditor コマンドは「プレビューを開く...」で .tex ファイルを開きます。
</ul>
<p>
<li>スクリプティングや外部エディタとは関連しない機能も追加されました：

			<li>プレビューのマウスモードが「選択」になっている状態で「全てを選択」を使って pdf 出力の全ページを選択できます。ただし制限事項が１つあります ； ページレイアウトが連続ページもしくは連続見開きページになっているときは、文書が最大で20ページの場合にのみ全てを選択することができます──そうでないと、選択した pdf が巨大になり、マシンの速度を低下させるので。

		<li>Ghostscript ではなく Apple の pstopdf で pdf を生成するよう環境設定項目で選べるようになりました。これは Panther でのみ機能します── pstopdf が Panther 固有のものなので。環境設定で選択したにもかかわらず Panther が機能しないようなら、従来の ghostscript コードが使われます。この環境設定を選択した場合、 ghostscript はもう TeXShop 内部のスクリプトには必要ありませんが、 teTeX のスタイルファイルではまだ必要とされるかもしれません。一例として epstopdf.sty がありますが、これはタイプセット時に eps ファイルを pdf 形式へと自動的に変換するのに用いられます。

			<li>銭谷さんにより、さらなるドラッグ＆ドロップのサポートが提供されました。新しいバージョンでは、ドロップしたファイルの名前にスペースが含まれているとエラーが出されます。新しいコードは、いくぶん奇妙な方法でカスタマイズも可能です。ドラッグ＆ドロップのコードをカスタマイズするには、マクロ・メニューに「Drag & Drop」という名前で新しいサブメニューを追加します。このフォルダ内に、ファイルタイプ<small>（拡張子）</small>ごとに項目を立て、各項目の「内容」をドラッグ＆ドロップされたときに実行されるコードにします。たとえば、ある項目が「pdf」だった場合、この項目のコード部分は "\includegraphics[#INS#]{%r}" となるでしょう──どの項目でも引用符は含みません。こうした取り込み用に、次のような短縮形を利用してもらえます：
			<p>
					<ul>
					<li>	%F = ドロップされたファイル名（絶対パス）
					<li>	%f = ドロップされたファイル名
					<li>	%r = ドロップされたファイル名（相対パス）
					<li>	%n = 拡張子なしのファイル名
					<li>	%e = 拡張子
					</ul>
<p>
			<li>拡張子が Drag & Drop メニューに挙げられていなければ、あるいはこのメニュー自体がなければ、ドラッグ＆ドロップは銭谷さんが規定しておいたように動作します──なので、ほとんどのユーザはコードをカスタマイズする必要はないでしょう。

<li>Martin Kerz によりドイツ語版のヘルプがアップデート、 Nicola Vitacolonna によりイタリア語版のローカライズがアップデート、 Juan Luis Varona Malumbres によりスペイン語版のヘルプがアップデート、 Hendrik Chaltin によりフランス語版のローカライズがアップデート、 Andrei Teleman によりルーマニア語版のローカライズが追加されました。ありがとう！

			<li>プレビューウィンドウがアクティブになっているときにもマクロを呼び出せるようになりました ； ここではテキストを挿入するコマンドは無効になります。プレビューウィンドウ用のツールバー項目が追加されたので、プレビューのツールバーにマクロ・ボタンを表示できます。
			
<li>途中でタイプセット・プログラムを止めたいユーザ用に「Abort」ボタンが追加されました。これはマイナー・チェンジです。

<li>Elliott Hughes によるコードが追加され、 LaTeX ・ TeX ・ BibTeX などを呼び出すコードがクリーンアップされました。バイナリ・ファイルが見つからない場合、プログラムはエラー状況を説明するエラーメッセージを出し、環境設定の bin パスが正しいかどうかを問い合わせます。これは Fink を使っていて環境設定を変更し忘れたユーザの役に立ちます。

<li>Joachim Kock のリクエストにより、 「プレビューを開く...」でファイルを開いた場合や、 TeXShop を外部エディタ・モードにしてファイルを開いた場合に、ソースとプレビュー・ファイルの日付を比較するようにしました。もしプレビュー・ファイルが古くなっていたり、まるっきり存在していなかった場合には、自動的にソースファイルをタイプセットします。この動作はデフォルトでオンになっていますが、オフにする隠れた環境設定があります：オフにするには──
	<p>
	<dl>
		<dd><tt>defaults write TeXShop ExternalEditorTypesetAtStart NO</tt>
	</dl>
<p>
</ul>


<p><h6>修正されたバグ：</h6></p>

	<ul>


				<li>幾人かのユーザからの報告では、プリンターが薄黄色の背景をページに付け加えてしまうとのことでした。少数のプリンターでのみこの問題が生じていました。 Frank Stengel により、これはプリント描画ルーチンにおける NSEraseRect の呼び出しに起因するものとわかりました。このコールは取り除かれました ； 今では TeXShop は、 Cocoa の vanilla コール [myRep draw] １行だけで印刷を行なっています。

			<li>Panther では、すべてのテキスト・オブジェクトに単語の補完が用意されています。単語の一部を入力して option＋escape を押せば、補完可能なリストをシステムが提示します。これは TeXShop や TextEdit その他の Cocoa プログラムで機能します。しかし TeXShop のコマンド補完が Panther で不具合となり、この新しい機能を使えませんでした。これを修正しました。

			<li>TeXShop にはテキストを追加する AppleScript コマンドがありますが、このコマンドが undo stack を更新していませんでした。これは Stefan Walsen により修正されました ； 彼のパッチがバージョン1.33に入っています。
			
			<li>ソースを印刷した後で、タイプセットした文書を印刷した場合、文書が下がってしまう。これを修正しました。

		<li>Jerry Keough が TeXShop を Jaguar で使用中に奇妙なバグを発見。環境設定で起動時に新しいファイルを作成しないよう設定していた場合に、文書を開いて pdf ウィンドウをアクティブにし、その後でソースウィンドウを閉じると、次に使うメニュー項目がプログラムをクラッシュさせてしまう。このバグは Panther では生じません。修正しました。




</font>
</ul>

<hr>

<p><h5>バージョン1.32では TeXShop に２つの機能をさらに追加し、いくつかのバグを修正しました。</h5></p>
<p><h6>新機能：</h6></p>

<ul>
<li> 
新しいメニュー項目「タグを追加」は、ソーステキストに空のタグを挿入し、タグの名前を追加できるようカーソルを配置します。そのうえで、新しいタグを追加するキー操作を用意しました ； command＋2 です。
</font>

<li> 
AppleScript マクロにおいて、#LOGPATH#、#AUXPATH#、#INDPATH#、#BBLPATH#、#HTMLPATH# が認識されるようになりました ； これは Claus Gerhardt のリクエストにより追加。
</font>

<li> 
MetaPost で呼び出すプログラムの設定用に、新しいオプションを用意しました。解説については TeXShop ヘルプをご覧ください。
</font>

<li> 
ドラッグ＆ドロップのコードが銭谷誠司さんにより改善されました。 pdf ・ jpg ・ jpeg ・ tif ・ tiff ・ eps ・ ps といった形式のファイルをソース文書にドロップすると、\includegraphics コマンドが挿入され、ファイルへの参照が行なわれます。 cls ・ sty ・ bib 形式のファイルをドロップすれば、\documentclass ・ \usepackage ・ \bibliographystyle コマンドが挿入され、ファイルへの参照が行なわれます。その他のテキスト・ファイルをドロップした場合には、\input コマンドが挿入され、ファイルへの参照が行なわれます。
</font>

</ul>

<p><h6>修正されたバグ：</h6></p>

<ul>

<li>バージョン1.31でズーム倍率が1000まで引き上げられましたが、倍率コントロールの隣りにある矢印では400までしか上げられませんでした。これを修正。


<li>プレビューウィンドウのツールバーを「テキストのみ」の表示にしてズーム倍率を選択すると、倍率を入力する小窓が1.31ではずっと残ってしまっていました。これを修正。

<li>環境設定において、タブ幅の文字数、あるいはプレビューウィンドウのズーム倍率を設定してキャンセルすると、ふたたび環境設定パネルを開いたときに、キャンセルしたはずの設定がそのまま残っていました。これを修正。

<li>環境設定で見開きページが「右からスタート（片面）」になっているとします。 1.31において、左矢印キーはまあ「見開きページ」で機能していましたが、右矢印キーは最後の１ページ手前で止まってしまっていました。 「複数見開きページ」では、 end キー、ページダウン・キー、それに右矢印キーが最終ページを表示する手前で止まっていました。こうした問題をすべて修正。

</ul>

<hr>
<p><h5>バージョン1.31では TeXShop にさらなる機能を追加し、いくつかのバグを修正しました。</h5></p>

<p><h6>新機能：</h6></p>

<ul>
<li> 
現在のウィンドウで設定されているタイプセット・エンジンごとに、マクロ項目をそれぞれ特有のものにできるようになりました。 TeXShop を最初に起動した際に、２つのデフォルトのマクロ・セットが作成されます──ひとつは LaTeX 用で、もうひとつは ConTeXt 用です（ ConTeXt 用のセットは Hans Hagen により作成されました ； ありがとう！）。違うタイプセット・エンジン（たとえば TeX ）が選択されたとします。当初はデフォルトの LaTeX 用のセットになっています。が、このマクロ・セットをマクロエディタで編集すると、編集したセットが TeX 使用時には使われるようになります──以前の LaTeX マクロはそのまま LaTeX で使われます。もちろん LaTeX マクロも編集可能です。
</font>

<li> 
新しい環境設定項目により、見開きページモードの最初のページを、左始まり右始まりのいずれにもできるようになりました。書籍では通常、最初のページは右にあるので、デフォルトの設定は右始まりになっています。
</font>

<li> 
環境設定ダイアログに新しいプルダウンメニューを設け、設定プロファイルをデフォルト値にリセットできるようにしました。この追加は銭谷誠司さんからのリクエストによるもので、３つの異なる版の pTeX に対応する必要がある日本のユーザ向けです。日本のユーザのみなさんは、ウェブサイトにあるドキュメントを調べずとも、素早く環境設定を行なえるようになりました。
</font>

<li> 
プレビューウィンドウでの最大ズーム倍率が1000になりました（以前は400でした）。
</font>

<li> 
Hendrik Chaltin によりフランス語訳のメニューを追加 ； ありがとう！
</font>


</ul>
<p><h6>修正されたバグ：</h6></p>

		<ul>

<li>Panther がらみの問題を３つ修正。 Panther での外観を改善するために、いくつかのインターフェイスを変更しました。今回のリリースは Panther への対応に欠くことのできないものです。

<ul>
	<li>Panther において、古いバージョンの TeXShop が、既存のファイルは開くものの、新規書類を作成しない──これは「displayName」コードに２行追加して修正しました。

	<li>Panther では、 「見開きページ」もしくは「複数見開きページ」でスクロールをかけたときに、現在のページ数を表示する小さな黄色いタグが空白になっていました。また、プレビューウィンドウの一部をコピーしようとして選択した方形部分のサイズを表示する小さな黄色いタグも空白なっていました。これを修正。

	<li>私のシステムでは、いずれのプログラムにおいても頻繁に Panther のスペルチェックがうまく機能しなくなります。これは起動時に発生します。コンピュータは起動しますが、最初に使うプログラムが TextEdit ないしは Mail であっても、 「あなたが入力するのに合わせてスペルチェック」してくれませんし、 「スペル・ダイアログ」も出してくれません。これは私のディスク上にあるサードパーティ製のプログラムの不具合ではないかと思われます──よその Panther ユーザはこの問題に遭遇していないのです。しかし、私は今のところバグを発見できていません。いったん問題が発生すると、 TextEdit と Mail でのテキスト入力に些細な支障が生じますが、これは入力中の自動スペルチェックをオフにすることで直ります。こうした状況で、 TeXShop にはもっと深刻な障害がありました。なので1.31では、スペルチェックが利用可能でない場合に、 TeXShop 起動時に入力中の自動スペルチェックをオフにする余分なコードを追加しました。

	</ul>

<li>Luis Sequeira により報告されたバグの修正：ソースウィンドウ内でテキストをドラッグした際に、コピーされペーストされる。オプションキーを押しながらでないかぎり、カットされペーストされるべきである。これを修正。

<li>Juan Luis Varona Malumbres がスペイン語ヘルプをいくらか改善（ドロワーに表示されるヘルプ・ファイルのリストの小アイコン）。

<li>見開きページで表示しているとき、タイプセット後に最初のページに移動しないようにしました。

<li>新しいページ表示ボタンおよびズーム倍率ボタンでは（1.29以前のように）テキストフィールドが選択された状態<small>〔 firstResponder 〕</small>になっているので、いちいちクリックすることなく、いろいろな設定を試してみることができます。

<li>バージョン1.30以前では、 「移動行指定」ダイアログで不可能な行数を入力した場合、プログラムがクラッシュすることがありました ； これを修正。このバグの報告を Eric Seidel に感謝。

<li>環境設定項目のインターフェイスの配置を見直し、メニュー項目をいくらか修正し、その他にも Panther でのインターフェイスを改善した新しい English.lproj フォルダを Kevin Ballard（ kevin@sb.org ）に提供してもらいました。どうもありがとう！

<li>ドイツ語版の環境設定パネルで Panther 用にスペースを変更。 Martin Kerz の提案に感謝。

<li>タグの自動追加機能をオフにする隠れた環境設定を用意しました：「defaults write TeXShop TagSections NO」がそれですが、この環境設定はいつの間にか（1.30では確実に）使えなくなっていました。これが再び使用可能になりました。


<li>TeXShop がアクティブでないときにも環境設定ウィンドウが隠れなくなりました。

</ul>


</div>		
<div id="header_background"></div>
<div id="header_logo"><a href="../TeXShop%20Help.html"><IMG HEIGHT="40" WIDTH="40" border="0" SRC="../gfx/xicnsc.gif"></a></div>
<div id="header_title">更新履歴</div>
</BODY>
</HTML>
