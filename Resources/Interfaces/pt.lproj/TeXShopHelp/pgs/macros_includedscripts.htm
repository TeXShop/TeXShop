<HTML>

<HEAD>
		<META HTTP-EQUIV="content-type" CONTENT="text/html;charset=iso-8859-1">
		<TITLE>Default AppleScript Macros</TITLE>
		<META NAME="copyright" CONTENT="Copyright (c) 2003 Richard Koch under the GNU FDL">
		<META NAME="description" CONTENT="applescript">
		<link href="../sty/screen.css" rel="stylesheet" media="all">
	</HEAD>

<BODY>
	<div id="content_border">
<P>TeXShop comes with an extended collection of
Applescripts by Will Robertson, Claus Gerhardt and others. Some of these scripts automate workflow when a series of typesetting commands must be issued in sequence. By copying and modifying the scripts, users can construct scripts appropriate for their own workflow.  
</P>

<P>In this section, we will describe some of these scripts. 
</P>

<P>
<h5>Column Macros, Insert Reference, Open Quickly: </h5>
</P>

<p> These macros are by Will Robertson. The first provides a very convenient way to construct
an arbitrary matrix or table. The second searches through the current file for \label{...} commands
and then pops up a list from which you may insert a reference label, wrapped in an (optional) customizable
LaTeX command. The final macro allows you to rapidly open any file in the directory of the current
source file.

<P>
<h5>Paste Spreadsheet Cells</h5>
<P>
This macro (by Alan Munn) provides cut-and-paste functionality from spreadsheet applications into your LaTeX source, using various popular table styles.
Select a range of cells in Excel or other spreadsheet application, and copy them to the clipboard.
Within TeXShop, choose Paste Spreadsheet Cells in the Macros menu.  You will be asked to choose a table style. The styles available are the following:
<P>
<DL>
<DT>cells
<DD>converts the clipboard text simply to latex table cells
<DT>simple
<DD>creates a simple tabular environment around the cells
<DT>booktabs
<DD>assumes the first line is a header, and places \toprule, \midrule and \bottomrules in the appropriate places within a tabular environment
<DT>longtable
<DD>assumes the first line is a header, creates the appropriate longtable header information and places the cells in a longtable environment
</DL>
<P>
Note that the script modifies the contents of the clipboard, so that it contains the LaTeX formatted text, and not your originally copied cells.  This means that if you need to change cell formats, you must re-copy the cells from your spreadsheet before choosing a different cell format to paste.
<P>

<P>
<h5>Convert to Mac, Convert to Unix, Convert to Windows: </h5>
</P>


<P>
In the early days, teletype terminals were used for communication. The ascii character set still has remnants from those days; for instance 0x07 rings the teletype bell. The
character 0x0a was a line feed which turned the carriage to the next line and the character 0x0d was a carriage return which pulled the carriage back to the start of the line. To get a line feed, one used the sequence 0x0d 0x0a.</P>

<P>
After the age of teletypes ended, computer manufacturers selected different subsets of these characters  to indicate a line feed. In the Unix world, 0x0a was used, in the Windows world 0x0d 0x0a was used, and in the old Macintosh Classic world 0x0d was used. Apple's guidelines for Mac OS X state that programs should be able to automatically open files using any of these conventions. Most programs including TextEdit, TeXShop, etc., follow these guidelines. In TeXShop, new files are created using Unix conventions, but if you load a file created with Mac OS Classic and then add extra lines, old portions of the document will be saved with the Classic convention and new sections will have the Unix convention.   
</P>

<P>
These line feeds cause no trouble until you send a file to a friend using a different operating system.
Many editors now understand multiple line feed conventions, so often you'll have no problems. But if you
do, use the scripts above. Suppose the source file for a document is named
MyFile.tex. Then "Convert to Mac" will create a new file named MyFile_Mac.tex with the same source
code and Macintosh line feed conventions. "Convert to Unix" and "Convert to Windows" work the same way.
All of these scripts call a binary program by Craig Stuart Sapp named "flip" in ~/Library/TeXShop/bin. See
http://ccrma-www.stanford.edu/~craig/utility/flip/ for details.
</P>

<P>
<h5>Other Scripts->Bibliography:</h5>
</P>

<P>
Processing a file with a bibliography requires multiple typesetting operations. First Latex is run to create an .aux file. Then Bibtex is run and uses this file to create .bbl and .blg files. Latex is run again to add the bibliography to the document. Latex is run a final time to update the references to the bibliography in the text.   
</P>

<P>
The "Bibliography" command does all of these things one by one. First it saves the file. Then
it runs latex->bibtex->latex->latex. Finally it updates the preview display.
</P>

<P>
<h5>htlatexc, htlatexr:</h5>
</P>

<P>
Tex4ht is a TeX program which converts a latex document into a web page. The source can be a standard
Latex file and can include eps illustrations. The end result is an html page and a large number of
gif files. The script command "htlatexc" saves the source documents, runs htlatex, and opens the resulting html file in Safari. Thus it behaves like a new TeXShop typesetting command, except that it was
constructed by a user without waiting for new TeXShop code!  
</P>

<P>
When using these scripts, it is not necessary to use the package tex4ht since this package will automatically be loaded. The script htlatexc calls htlatex without additional options. The script htlatexr calls it with the option "-r", which tells the program to recreate any .gifs which already exist.
</P>

<P>
<h5>pdfselectc:</h5>
</P>

<P>
This script runs the shell script pdfselect to create pdf files containing only certain selected
pages of a document. When it is run, a dialog appears asking for the number of pdf files to be
created. Suppose we answer 3. Next a dialog appears asking for the range for the first document.
Suppose we answer 5:8. A dialog appears asking for the range of the second document. Suppose we
answer 10. A dialog asks for the range of the third document. Suppose we answer 20:30. We will
then obtain three documents, one containing pages 5 - 8 of the original, one containing page 10,
and one containing pages 20 - 30.
</P>

<P>
<h5>mpostc, mpostcpl, latex-makeindex-mpost:</h5>
</P>

<P>
The script mpostc runs mpost and then pdflatex; the script mpostcpl runs pdflatex, and then mpost, and then pdflatex again.
See the TeXShop help file General: Context and Metapost for an example of the use of these three
commands in sequence.</P>

<P> 
The script latex-makeindex-mpost saves the source and runs pdflatex, makeindex, mpost, and pdflatex again, opening relevant log files in the process. 
</P>




</div>
<div id="header_background"></div>
<div id="header_logo"><a href="../TeXShop%20Help.html"><IMG HEIGHT="40" WIDTH="40" border="0" SRC="../gfx/xicnsc.gif"></a></div>
<div id="header_chapter">Macros Help</div>
<div id="header_title">Default AppleScript Macros</div>

	<div id="menu_border">
		<UL>
			<LI><a href="macros_preliminaries.htm">Preliminaries</a></li>
			<LI><a href="macros_default.htm">Understanding Default Macros</a></li>
			<LI><a href="macros_rearrange.htm">Rearranging the Macro Menu</a></li>
			<LI><a href="macros_define.htm">Defining New Macros</a></li>
			<li><a href="macros_applescript.htm">AppleScript Macros</a></li>
			<LI><a href="macros_includedscripts.htm">Default AppleScript Macros</a></li>
			<li><a href="macros_defapplescript.htm">Defining AppleScript Macros</a></li>
			<li><a href="macros_dialogs.htm">Creating Dialogs</a></li>
			<li><a href="macros_writingcompletescripts.htm">Writing Scripts with TeXShop Typesetting Commands</a></li>
			<li><a href="macros_writingcommandscripts.htm">Writing Scripts with Shell Commands</a></li>
		</UL>
	</div>

	</BODY>

</HTML>