<HTML>

<HEAD>
			<META HTTP-EQUIV="content-type" CONTENT="text/html;charset=Shift_JIS">
			<TITLE>新規フォーマットの作成と利用</TITLE>
			<META NAME="copyright" CONTENT="Copyright (c) 2003 Richard Koch under the GNU FDL">
			<META NAME="description" CONTENT="フォーマット フォーマットファイル fmt">
			<link href="../sty/screen.css" rel="stylesheet" media="all">
</HEAD>

<BODY>

	<div id="content_border">

<!-- 
<h4> Using formats </h4>
 -->

<h4>フォーマットの利用</h4>

<!-- 
		<P>When TeX typesets a document, it must process the document header, which may contain
a large number of \input, \include, and \usepackage statements. Every time the document is typeset,
this process is repeated even though large portions of the header did not change.</P>
 -->
<p>
TeX がタイプセットを行なう際には、文書のヘッダを処理しなければなりませんが、そこには \input や \includde あるいは \usepackage などの命令が数多く含まれているかもしれません。文書をタイプセットするたびに、このプロセスはくり返されます──ヘッダの大部分に変化がなかったとしてもです。
</p>

<!-- 
<p> TeX has a built-in mechanism to speed up this process. It can be instructed to process lines of source and output the result to a "format file." When TeX typesets after that, it can rapidly read the format and then typeset the document. LaTeX is constructed in this manner;
the format file is created when TeX is installed on your machine and the command "latex file" tells TeX to read this format and then typeset "file". </p>
 -->

<p>
TeX にはこのプロセスを高速化するための機構が組み込まれています。それにより、ソースを処理した結果を「フォーマットファイル」に出力するよう指示することができます。そうしておいてから TeX でタイプセットを実行すると、素早くフォーマットを読み込んだ上で文書をタイプセットすることができます。LaTeX はこの方法で構築されています──TeX をコンピュータにインストールする際にフォーマットファイルが生成されますが、コマンド「latex file」が TeX に対してこのフォーマットを読み込むよう命じ、その上で「ファイル」をタイプセットするのです。
</p>

<!-- 
<p> When machines were slower, users often created their own format files to speed up typesetting.
This is done less often today, but dealing with format files may still be useful. For instance, some organizations create and distribute a format to be used by everyone working on a common project. In this section we'll explain how to use a format file provided by someone else, and how to create a format.</p>
 -->

<p>
マシン速度がまだ遅かった時分には、ユーザはよく独自のフォーマットファイルを作成してタイプセットのスピードを上げていました。これは今日ではあまり行なわれないのですが、フォーマットファイルの利用は今でもなお有用なことかもしれません。たとえば、ある組織で、共通のプロジェクトに参加する各員が利用できるよう、フォーマットを作成して配布する、というように。この章では、他から提供されたフォーマットを利用する方法、およびどのようにしてフォーマットを作成するのかについて説明しましょう。
</p>

<!-- 
<p> A typical format file has extension "fmt". Suppose a department of the University of Oregon has provided a format "uo.fmt". To use this format, follow the steps below:</p>
 -->

<p>
典型的なフォーマットファイルの拡張子は「fmt」です。たとえばオレゴン大学の学部がフォーマット「uo.fmt」を配布したとしましょう。このフォーマットを使用するには、以下のような手順を踏みます──
</p>

<ul>

<!-- 
<li> Move uo.fmt to "~/Library/texmf/web2c/uo.fmt". You may need to create some of these directories.
 -->
<li>「uo.fmt」を ~/Library/texmf/web2c/uo.fmt へと移します。このうちのいくつかのディレクトリは新たに作成する必要があるかもしません。

<!-- 
<li> Create a new "engine file" by going to ~/Library/TeXShop/Engines and duplicating the file
XeLaTeX.engine. Engine files need to have the execute bit set, and this duplication step automatically does that.
 -->
<li>新しい「エンジンファイル」を作成します──~/Library/TeXShop/Engines へ行き「XeLaTeX.engine」というファイルを複製してください。エンジンファイルには実行ビットセットが必要ですが、この複製の過程で自動的に備わります。

<!-- 
<li> Rename this new file. The name need not
match the name of the format. Since the name will appear in the TeXShop interface, it should make sense to a user. We'll choose "Oregon.engine".
 -->
<li>複製したファイルの名称を変更します。この名称をフォーマット名と同じにする必要はありません。名称は TeXShop のインターフェイスに表示されるので、ユーザにとってわかりやすいものにします。ここでは「Oregon.engine」とします。

<!-- 
<li> Open Oregon.engine in TeXShop and edit it to read as follows
 -->
<li>「Oregon.engine」を TeXShop で開き、下記のように編集します──

	<tt>
		<dl>
			<dd>#!/bin/tcsh
			<dd>
			<dd>set path= ($path /usr/local/teTeX/bin/powerpc-apple-darwin-current /usr/local/bin)
		<dd>pdflatex -fmt uo  "$1" 
		</dl>
	</tt>

<!-- 
	The first two lines will already be present, so it may only be necessary to change the third line.
However if your machine has an Intel processor, the word "powerpc" in the second line should
be changed to "i386".
 -->

最初の２行は既存のものですから、書き換えが必要なのは３行目だけでしょう。ただし、インテルのプロセッサーを載せたマシンでは、２行目の「powerpc」を「i386」に変えてやらねばなりません。

</ul>

<!-- 
<p> This completes the installation. The next time you start TeXShop, the pulldown menu beside
the typeset button on the Source Window Toolbar will list "Oregon" as an option. Choose this to typeset using the uo.fmt format. If you want this typesetting method to be the default, go to
TeXShop preferences under the Typesetting tab, and in the Default Command box select "Command Listed Below" and fill in the edit box with the word Oregon.</p>
 -->

<p>
これで導入作業は済みました。次回 TeXShop を起動すると、ソースウインドウのツールバーにあるタイプセットボタン脇のプルダウンメニューに「Oregon」がタイプセット・オプションとして入っています。これを選択し「uo.fmt」フォーマットを使用してタイプセットします。もしもこのタイプセット方法をデフォルトにしたければ、TeXShop 環境設定を開き、「タイプセット」タブのところにある「デフォルトのコマンド」から「次のコマンドを利用」を選択し、テキストボックスに“Oregon”と書き入れておきます。
</p>

<!-- 
<p> It is also possible to select the Oregon format for a particular document 
without changing the typesetting option. To do that, add the
following line to the top of the source file:</p>
 -->

<p>
ある特定の文書用に、タイプセット・オプションを変更することなく「Oregon」フォーマットを指定することもできます。そのためには、ソースファイルの冒頭に、次のような１行を追加します──
</p>

	<tt>
		<dl>
			<dd> %!TEX TS-program = Oregon
		</dl>
	</tt>

<!-- 
<p> Then uo.fmt will be used for that document regardless of the typesetting option chosen.</p>
 -->

<p>
これで、タイプセット・オプションの選択の如何に関わらず、この文書には「uo.fmt」が用いられます。
</p>

<!-- 
<p> The above instructions assume you have a format for pdflatex. You can also make formats for plain tex; in that case change "pdflatex" to "pdftex" in the engine file.</p>
 -->

<p>
以上の解説は、ユーザが既に pdflatex 用のフォーマットを所持しているものと想定しています。ユーザが plain TeX 用のフォーマットを作成することもできます──この場合にはエンジンファイルを「pdflatex」ではなく「pdftex」としておきます。
</p>

<!-- 
<p> It is also possible to use formats when you are typesetting with tex + ghostscript. TeXShop assumes that an
engine file contains one or more command line instructions and ultimately produces a pdf file.
So the engine file must contain the commands which convert the dvi file to a pdf file.
Here is a typical engine file for uo.fmt in that case:</p>
 -->

<p>
「TeX + Ghostscript」でタイプセットする場合でも、フォーマットを利用することはできます。TeXShop では、エンジンファイルに１つないしはそれ以上のコマンドライン指定が含まれており、最終的には pdf ファイルを生成するものと想定しています。そのためエンジンファイルには、dvi ファイルを pdf ファイルに変換するためのコマンドが含まれていなければなりません。こういった場合における「uo.fmt」用の典型的なエンジンファイルは以下のようなものです──
</p>

	<tt>
		<dl>
			<dd>#!/bin/tcsh
			<dd>set path= ($path /usr/local/teTeX/bin/powerpc-apple-darwin-current /usr/local/bin)
			<dd>latex -fmt uolatex  "$1"
			<dd>set filename = "$1"
			<dd>dvips "${filename:r}.dvi"
			<dd>pstopdf "${filename:r}.ps" 
		</dl>
	</tt>

<!-- 
<h4> Making formats </h4>
 -->
<h4>フォーマットの作成</h4>

<!-- 
<p> Format files contain the internal binary representation of typeset lines of source.
This representation depends on the processor and particular TeX implementation. Thus it is
rarely possible to use a format file from someone else unless that person has the same
machine and TeX installation that you do.<p>
 -->

<p>
フォーマットファイルには、ソースのタイプセットについて、内部におけるバイナリの再現性（リプリゼンテーション）が含まれています。この再現性はプロセッサと個々の TeX の実装に依存します。ですから他から提供されたフォーマットファイルが利用可能なことは滅多にありません──先方でも同じマシンを持っていて、そっくり同じように TeX をインストールしてあるのでない限りは。
</p>

<!-- 
<p> However, it is common for organizations to distribute the source lines needed to construct
a format. In that case you'll be told to make the format using "initTeX". For example,
suppose this source text is "uo.tex". To make the format,
open Apple's Terminal program and change to the directory containing the source for the
format. Then type</p>
 -->

<p>
しかしながら、フォーマットを生成するために必要なソースを組織で配布することは、ごく普通に行なわれています。こうした場合には「initTeX」を使ってフォーマットを作成するように、と言われることでしょう。そこで、たとえばフォーマット用のソーステキストを「uo.tex」としてみましょう。フォーマットを作るには、Apple の Terminal.app を起動し、フォーマット用のソースがあるディレクトリへ移動します。そして次のようにタイプします──
</p>

	<tt>
		<dl>
			<dd>pdflatex -ini
		</dl>
	</tt>

<!-- 
<p>You will get a ** prompt. Type the following line at the prompt</p>
 -->

<p>
すると前に ** の付いたプロンプトになります。プロンプトのところで次のように打ち込みます──
</p>

	<tt>
		<dl>
			<dd>&pdflatex uo
		</dl>
	</tt>

<!-- 
<p>and press return. The format file will be created. At the end you may have to
issue a "\dump" command if the format source doesn't contain it. This will produce
the required "uo.fmt".</p>
 -->

<p>
そしてリターンキーを押します。これでフォーマットファイルが作成されます。もしフォーマットのソースに「\dump」が含まれていなかった場合には、最後に「\dump」コマンドを打ち込んでやらなければならないかもしれません。これで必要な「uo.fmt」が作られます。
</p>

<!-- 
<p> You might like to try this with the follow "uo.tex" file:</p>
 -->

<p>
以下のような「uo.tex」で試してみるのもいいかもしれません──
</p>

	<tt>
		<dl>
			<dd>\documentclass[11pt]{article}
			<dd>\usepackage{geometry}
			<dd>\geometry{letterpaper}
			<dd>\usepackage[parfill]{parskip}
			<dd>\usepackage{graphicx}
			<dd>\usepackage{amssymb}
			<dd>\usepackage{epstopdf}
			<dd>\DeclareGraphicsRule{.tif}{png}{.png}{`convert #1 `dirname #1`/`basename #1 .tif`.png}
			<dd>\dump
		</dl>
	</tt>

<div id="header_background"></div>
<div id="header_logo"><a href="../TeXShop%20Help.html"><IMG HEIGHT="40" WIDTH="40" border="0" SRC="../gfx/xicnsc.gif"></a></div>
<div id="header_chapter">上級向けのヘルプ</div>
<div id="header_title">新規フォーマットの作成と利用</div>

		<div id="menu_border">
		<ul>
			<li><a href="advanced_personaltetex.htm">スタイルとマクロを teTeX に追加する</a>
			<li><a href="advanced_addengine.htm">追加のタイプセットエンジン</a>
			<li><a href="advanced_removeaux.htm">作業ファイルを削除する</a>
			<li><a href="advanced_externaleditor.htm">外部エディタを使用する</a>
			<li><a href="advanced_pdfcopypaste.htm">プレビューウインドウからのコピー＆ペーストおよびドラッグ＆ドロップ </a>
			<li><a href="advanced_root.htm">プロジェクトのルートファイルを設定する</a>
			<li><a href="advanced_pdfsync.htm">Pdfsync</a>
			<li><a href="advanced_unicode.htm">Unicode（ユニコード）</a>
			<li><a href="advanced_bibtex.htm">BibTeX</a>
			<li><a href="advanced_makeindex.htm">MakeIndex</a>
			<li><a href="advanced_formats.htm">新規フォーマットの作成と利用</a>
			<li><a href="advanced_otherfiles.htm">その他のファイルを TeXShop で開く</a>
			<li><a href="advanced_mathematica.htm">Mathematica</a>
			<li><a href="advanced_localization.htm">各国語版へのローカライズ</a>
			<li><a href="advanced_syntaxcolor.htm">ソースのカラー表示</a>
			<li><a href="advanced_shellescape.htm">Shell-Escape の保護</a>			
			<li><a href="advanced_coloredtext.htm">TeX における文字の色指定</a>			
			<li><a href="advanced_moretetex.htm">teTeX についてさらに</a>
			<li><a href="advanced_fink.htm">Fink との共存</a>
			<li><a href="advanced_otherdistributions.htm">他の TeX ディストリビューションとの共存</a>
			<li><a href="advanced_context.htm">ConTeXt と MetaPost</a>
			<li><a href="advanced_plist.htm">Plist ファイル</a>
			<li><a href="advanced_menushortcuts.htm">メニュー項目のショートカットキーを再定義する</a>
		</ul>
	</div>
	</body>

</HTML>
